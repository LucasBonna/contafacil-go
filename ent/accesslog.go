// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lucasbonna/contafacil_api/ent/accesslog"
)

// AccessLog is the model entity for the AccessLog schema.
type AccessLog struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// Method holds the value of the "method" field.
	Method string `json:"method,omitempty"`
	// Endpoint holds the value of the "endpoint" field.
	Endpoint string `json:"endpoint,omitempty"`
	// RequestBody holds the value of the "request_body" field.
	RequestBody string `json:"request_body,omitempty"`
	// RequestHeaders holds the value of the "request_headers" field.
	RequestHeaders string `json:"request_headers,omitempty"`
	// RequestParams holds the value of the "request_params" field.
	RequestParams string `json:"request_params,omitempty"`
	// RequestQuery holds the value of the "request_query" field.
	RequestQuery string `json:"request_query,omitempty"`
	// ResponseBody holds the value of the "response_body" field.
	ResponseBody string `json:"response_body,omitempty"`
	// ResponseHeaders holds the value of the "response_headers" field.
	ResponseHeaders string `json:"response_headers,omitempty"`
	// ResponseTime holds the value of the "response_time" field.
	ResponseTime string `json:"response_time,omitempty"`
	// StatusCode holds the value of the "status_code" field.
	StatusCode int `json:"status_code,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AccessLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case accesslog.FieldStatusCode:
			values[i] = new(sql.NullInt64)
		case accesslog.FieldIP, accesslog.FieldMethod, accesslog.FieldEndpoint, accesslog.FieldRequestBody, accesslog.FieldRequestHeaders, accesslog.FieldRequestParams, accesslog.FieldRequestQuery, accesslog.FieldResponseBody, accesslog.FieldResponseHeaders, accesslog.FieldResponseTime:
			values[i] = new(sql.NullString)
		case accesslog.FieldCreatedAt, accesslog.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case accesslog.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AccessLog fields.
func (al *AccessLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case accesslog.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				al.ID = *value
			}
		case accesslog.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				al.IP = value.String
			}
		case accesslog.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				al.Method = value.String
			}
		case accesslog.FieldEndpoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field endpoint", values[i])
			} else if value.Valid {
				al.Endpoint = value.String
			}
		case accesslog.FieldRequestBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_body", values[i])
			} else if value.Valid {
				al.RequestBody = value.String
			}
		case accesslog.FieldRequestHeaders:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_headers", values[i])
			} else if value.Valid {
				al.RequestHeaders = value.String
			}
		case accesslog.FieldRequestParams:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_params", values[i])
			} else if value.Valid {
				al.RequestParams = value.String
			}
		case accesslog.FieldRequestQuery:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_query", values[i])
			} else if value.Valid {
				al.RequestQuery = value.String
			}
		case accesslog.FieldResponseBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response_body", values[i])
			} else if value.Valid {
				al.ResponseBody = value.String
			}
		case accesslog.FieldResponseHeaders:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response_headers", values[i])
			} else if value.Valid {
				al.ResponseHeaders = value.String
			}
		case accesslog.FieldResponseTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response_time", values[i])
			} else if value.Valid {
				al.ResponseTime = value.String
			}
		case accesslog.FieldStatusCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status_code", values[i])
			} else if value.Valid {
				al.StatusCode = int(value.Int64)
			}
		case accesslog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				al.CreatedAt = value.Time
			}
		case accesslog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				al.UpdatedAt = value.Time
			}
		default:
			al.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AccessLog.
// This includes values selected through modifiers, order, etc.
func (al *AccessLog) Value(name string) (ent.Value, error) {
	return al.selectValues.Get(name)
}

// Update returns a builder for updating this AccessLog.
// Note that you need to call AccessLog.Unwrap() before calling this method if this AccessLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (al *AccessLog) Update() *AccessLogUpdateOne {
	return NewAccessLogClient(al.config).UpdateOne(al)
}

// Unwrap unwraps the AccessLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (al *AccessLog) Unwrap() *AccessLog {
	_tx, ok := al.config.driver.(*txDriver)
	if !ok {
		panic("ent: AccessLog is not a transactional entity")
	}
	al.config.driver = _tx.drv
	return al
}

// String implements the fmt.Stringer.
func (al *AccessLog) String() string {
	var builder strings.Builder
	builder.WriteString("AccessLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", al.ID))
	builder.WriteString("ip=")
	builder.WriteString(al.IP)
	builder.WriteString(", ")
	builder.WriteString("method=")
	builder.WriteString(al.Method)
	builder.WriteString(", ")
	builder.WriteString("endpoint=")
	builder.WriteString(al.Endpoint)
	builder.WriteString(", ")
	builder.WriteString("request_body=")
	builder.WriteString(al.RequestBody)
	builder.WriteString(", ")
	builder.WriteString("request_headers=")
	builder.WriteString(al.RequestHeaders)
	builder.WriteString(", ")
	builder.WriteString("request_params=")
	builder.WriteString(al.RequestParams)
	builder.WriteString(", ")
	builder.WriteString("request_query=")
	builder.WriteString(al.RequestQuery)
	builder.WriteString(", ")
	builder.WriteString("response_body=")
	builder.WriteString(al.ResponseBody)
	builder.WriteString(", ")
	builder.WriteString("response_headers=")
	builder.WriteString(al.ResponseHeaders)
	builder.WriteString(", ")
	builder.WriteString("response_time=")
	builder.WriteString(al.ResponseTime)
	builder.WriteString(", ")
	builder.WriteString("status_code=")
	builder.WriteString(fmt.Sprintf("%v", al.StatusCode))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(al.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(al.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AccessLogs is a parsable slice of AccessLog.
type AccessLogs []*AccessLog
