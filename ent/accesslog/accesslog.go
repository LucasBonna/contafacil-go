// Code generated by ent, DO NOT EDIT.

package accesslog

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the accesslog type in the database.
	Label = "access_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIP holds the string denoting the ip field in the database.
	FieldIP = "ip"
	// FieldMethod holds the string denoting the method field in the database.
	FieldMethod = "method"
	// FieldEndpoint holds the string denoting the endpoint field in the database.
	FieldEndpoint = "endpoint"
	// FieldRequestBody holds the string denoting the request_body field in the database.
	FieldRequestBody = "request_body"
	// FieldRequestHeaders holds the string denoting the request_headers field in the database.
	FieldRequestHeaders = "request_headers"
	// FieldRequestParams holds the string denoting the request_params field in the database.
	FieldRequestParams = "request_params"
	// FieldRequestQuery holds the string denoting the request_query field in the database.
	FieldRequestQuery = "request_query"
	// FieldResponseBody holds the string denoting the response_body field in the database.
	FieldResponseBody = "response_body"
	// FieldResponseHeaders holds the string denoting the response_headers field in the database.
	FieldResponseHeaders = "response_headers"
	// FieldResponseTime holds the string denoting the response_time field in the database.
	FieldResponseTime = "response_time"
	// FieldStatusCode holds the string denoting the status_code field in the database.
	FieldStatusCode = "status_code"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the accesslog in the database.
	Table = "access_logs"
)

// Columns holds all SQL columns for accesslog fields.
var Columns = []string{
	FieldID,
	FieldIP,
	FieldMethod,
	FieldEndpoint,
	FieldRequestBody,
	FieldRequestHeaders,
	FieldRequestParams,
	FieldRequestQuery,
	FieldResponseBody,
	FieldResponseHeaders,
	FieldResponseTime,
	FieldStatusCode,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ResponseTimeValidator is a validator for the "response_time" field. It is called by the builders before save.
	ResponseTimeValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
)

// OrderOption defines the ordering options for the AccessLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIP orders the results by the ip field.
func ByIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIP, opts...).ToFunc()
}

// ByMethod orders the results by the method field.
func ByMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMethod, opts...).ToFunc()
}

// ByEndpoint orders the results by the endpoint field.
func ByEndpoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndpoint, opts...).ToFunc()
}

// ByRequestBody orders the results by the request_body field.
func ByRequestBody(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestBody, opts...).ToFunc()
}

// ByRequestHeaders orders the results by the request_headers field.
func ByRequestHeaders(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestHeaders, opts...).ToFunc()
}

// ByRequestParams orders the results by the request_params field.
func ByRequestParams(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestParams, opts...).ToFunc()
}

// ByRequestQuery orders the results by the request_query field.
func ByRequestQuery(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestQuery, opts...).ToFunc()
}

// ByResponseBody orders the results by the response_body field.
func ByResponseBody(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResponseBody, opts...).ToFunc()
}

// ByResponseHeaders orders the results by the response_headers field.
func ByResponseHeaders(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResponseHeaders, opts...).ToFunc()
}

// ByResponseTime orders the results by the response_time field.
func ByResponseTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResponseTime, opts...).ToFunc()
}

// ByStatusCode orders the results by the status_code field.
func ByStatusCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatusCode, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
