// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lucasbonna/contafacil_api/ent/accesslog"
)

// AccessLogCreate is the builder for creating a AccessLog entity.
type AccessLogCreate struct {
	config
	mutation *AccessLogMutation
	hooks    []Hook
}

// SetIP sets the "ip" field.
func (alc *AccessLogCreate) SetIP(s string) *AccessLogCreate {
	alc.mutation.SetIP(s)
	return alc
}

// SetMethod sets the "method" field.
func (alc *AccessLogCreate) SetMethod(s string) *AccessLogCreate {
	alc.mutation.SetMethod(s)
	return alc
}

// SetEndpoint sets the "endpoint" field.
func (alc *AccessLogCreate) SetEndpoint(s string) *AccessLogCreate {
	alc.mutation.SetEndpoint(s)
	return alc
}

// SetRequestBody sets the "request_body" field.
func (alc *AccessLogCreate) SetRequestBody(s string) *AccessLogCreate {
	alc.mutation.SetRequestBody(s)
	return alc
}

// SetNillableRequestBody sets the "request_body" field if the given value is not nil.
func (alc *AccessLogCreate) SetNillableRequestBody(s *string) *AccessLogCreate {
	if s != nil {
		alc.SetRequestBody(*s)
	}
	return alc
}

// SetRequestHeaders sets the "request_headers" field.
func (alc *AccessLogCreate) SetRequestHeaders(s string) *AccessLogCreate {
	alc.mutation.SetRequestHeaders(s)
	return alc
}

// SetNillableRequestHeaders sets the "request_headers" field if the given value is not nil.
func (alc *AccessLogCreate) SetNillableRequestHeaders(s *string) *AccessLogCreate {
	if s != nil {
		alc.SetRequestHeaders(*s)
	}
	return alc
}

// SetRequestParams sets the "request_params" field.
func (alc *AccessLogCreate) SetRequestParams(s string) *AccessLogCreate {
	alc.mutation.SetRequestParams(s)
	return alc
}

// SetNillableRequestParams sets the "request_params" field if the given value is not nil.
func (alc *AccessLogCreate) SetNillableRequestParams(s *string) *AccessLogCreate {
	if s != nil {
		alc.SetRequestParams(*s)
	}
	return alc
}

// SetRequestQuery sets the "request_query" field.
func (alc *AccessLogCreate) SetRequestQuery(s string) *AccessLogCreate {
	alc.mutation.SetRequestQuery(s)
	return alc
}

// SetNillableRequestQuery sets the "request_query" field if the given value is not nil.
func (alc *AccessLogCreate) SetNillableRequestQuery(s *string) *AccessLogCreate {
	if s != nil {
		alc.SetRequestQuery(*s)
	}
	return alc
}

// SetResponseBody sets the "response_body" field.
func (alc *AccessLogCreate) SetResponseBody(s string) *AccessLogCreate {
	alc.mutation.SetResponseBody(s)
	return alc
}

// SetNillableResponseBody sets the "response_body" field if the given value is not nil.
func (alc *AccessLogCreate) SetNillableResponseBody(s *string) *AccessLogCreate {
	if s != nil {
		alc.SetResponseBody(*s)
	}
	return alc
}

// SetResponseHeaders sets the "response_headers" field.
func (alc *AccessLogCreate) SetResponseHeaders(s string) *AccessLogCreate {
	alc.mutation.SetResponseHeaders(s)
	return alc
}

// SetNillableResponseHeaders sets the "response_headers" field if the given value is not nil.
func (alc *AccessLogCreate) SetNillableResponseHeaders(s *string) *AccessLogCreate {
	if s != nil {
		alc.SetResponseHeaders(*s)
	}
	return alc
}

// SetResponseTime sets the "response_time" field.
func (alc *AccessLogCreate) SetResponseTime(s string) *AccessLogCreate {
	alc.mutation.SetResponseTime(s)
	return alc
}

// SetNillableResponseTime sets the "response_time" field if the given value is not nil.
func (alc *AccessLogCreate) SetNillableResponseTime(s *string) *AccessLogCreate {
	if s != nil {
		alc.SetResponseTime(*s)
	}
	return alc
}

// SetStatusCode sets the "status_code" field.
func (alc *AccessLogCreate) SetStatusCode(i int) *AccessLogCreate {
	alc.mutation.SetStatusCode(i)
	return alc
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (alc *AccessLogCreate) SetNillableStatusCode(i *int) *AccessLogCreate {
	if i != nil {
		alc.SetStatusCode(*i)
	}
	return alc
}

// SetCreatedAt sets the "created_at" field.
func (alc *AccessLogCreate) SetCreatedAt(t time.Time) *AccessLogCreate {
	alc.mutation.SetCreatedAt(t)
	return alc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (alc *AccessLogCreate) SetNillableCreatedAt(t *time.Time) *AccessLogCreate {
	if t != nil {
		alc.SetCreatedAt(*t)
	}
	return alc
}

// SetUpdatedAt sets the "updated_at" field.
func (alc *AccessLogCreate) SetUpdatedAt(t time.Time) *AccessLogCreate {
	alc.mutation.SetUpdatedAt(t)
	return alc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (alc *AccessLogCreate) SetNillableUpdatedAt(t *time.Time) *AccessLogCreate {
	if t != nil {
		alc.SetUpdatedAt(*t)
	}
	return alc
}

// SetID sets the "id" field.
func (alc *AccessLogCreate) SetID(u uuid.UUID) *AccessLogCreate {
	alc.mutation.SetID(u)
	return alc
}

// Mutation returns the AccessLogMutation object of the builder.
func (alc *AccessLogCreate) Mutation() *AccessLogMutation {
	return alc.mutation
}

// Save creates the AccessLog in the database.
func (alc *AccessLogCreate) Save(ctx context.Context) (*AccessLog, error) {
	alc.defaults()
	return withHooks(ctx, alc.sqlSave, alc.mutation, alc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (alc *AccessLogCreate) SaveX(ctx context.Context) *AccessLog {
	v, err := alc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alc *AccessLogCreate) Exec(ctx context.Context) error {
	_, err := alc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alc *AccessLogCreate) ExecX(ctx context.Context) {
	if err := alc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (alc *AccessLogCreate) defaults() {
	if _, ok := alc.mutation.CreatedAt(); !ok {
		v := accesslog.DefaultCreatedAt
		alc.mutation.SetCreatedAt(v)
	}
	if _, ok := alc.mutation.UpdatedAt(); !ok {
		v := accesslog.DefaultUpdatedAt
		alc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (alc *AccessLogCreate) check() error {
	if _, ok := alc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "AccessLog.ip"`)}
	}
	if _, ok := alc.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New(`ent: missing required field "AccessLog.method"`)}
	}
	if _, ok := alc.mutation.Endpoint(); !ok {
		return &ValidationError{Name: "endpoint", err: errors.New(`ent: missing required field "AccessLog.endpoint"`)}
	}
	if v, ok := alc.mutation.ResponseTime(); ok {
		if err := accesslog.ResponseTimeValidator(v); err != nil {
			return &ValidationError{Name: "response_time", err: fmt.Errorf(`ent: validator failed for field "AccessLog.response_time": %w`, err)}
		}
	}
	if _, ok := alc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AccessLog.created_at"`)}
	}
	if _, ok := alc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AccessLog.updated_at"`)}
	}
	return nil
}

func (alc *AccessLogCreate) sqlSave(ctx context.Context) (*AccessLog, error) {
	if err := alc.check(); err != nil {
		return nil, err
	}
	_node, _spec := alc.createSpec()
	if err := sqlgraph.CreateNode(ctx, alc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	alc.mutation.id = &_node.ID
	alc.mutation.done = true
	return _node, nil
}

func (alc *AccessLogCreate) createSpec() (*AccessLog, *sqlgraph.CreateSpec) {
	var (
		_node = &AccessLog{config: alc.config}
		_spec = sqlgraph.NewCreateSpec(accesslog.Table, sqlgraph.NewFieldSpec(accesslog.FieldID, field.TypeUUID))
	)
	if id, ok := alc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := alc.mutation.IP(); ok {
		_spec.SetField(accesslog.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := alc.mutation.Method(); ok {
		_spec.SetField(accesslog.FieldMethod, field.TypeString, value)
		_node.Method = value
	}
	if value, ok := alc.mutation.Endpoint(); ok {
		_spec.SetField(accesslog.FieldEndpoint, field.TypeString, value)
		_node.Endpoint = value
	}
	if value, ok := alc.mutation.RequestBody(); ok {
		_spec.SetField(accesslog.FieldRequestBody, field.TypeString, value)
		_node.RequestBody = value
	}
	if value, ok := alc.mutation.RequestHeaders(); ok {
		_spec.SetField(accesslog.FieldRequestHeaders, field.TypeString, value)
		_node.RequestHeaders = value
	}
	if value, ok := alc.mutation.RequestParams(); ok {
		_spec.SetField(accesslog.FieldRequestParams, field.TypeString, value)
		_node.RequestParams = value
	}
	if value, ok := alc.mutation.RequestQuery(); ok {
		_spec.SetField(accesslog.FieldRequestQuery, field.TypeString, value)
		_node.RequestQuery = value
	}
	if value, ok := alc.mutation.ResponseBody(); ok {
		_spec.SetField(accesslog.FieldResponseBody, field.TypeString, value)
		_node.ResponseBody = value
	}
	if value, ok := alc.mutation.ResponseHeaders(); ok {
		_spec.SetField(accesslog.FieldResponseHeaders, field.TypeString, value)
		_node.ResponseHeaders = value
	}
	if value, ok := alc.mutation.ResponseTime(); ok {
		_spec.SetField(accesslog.FieldResponseTime, field.TypeString, value)
		_node.ResponseTime = value
	}
	if value, ok := alc.mutation.StatusCode(); ok {
		_spec.SetField(accesslog.FieldStatusCode, field.TypeInt, value)
		_node.StatusCode = value
	}
	if value, ok := alc.mutation.CreatedAt(); ok {
		_spec.SetField(accesslog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := alc.mutation.UpdatedAt(); ok {
		_spec.SetField(accesslog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// AccessLogCreateBulk is the builder for creating many AccessLog entities in bulk.
type AccessLogCreateBulk struct {
	config
	err      error
	builders []*AccessLogCreate
}

// Save creates the AccessLog entities in the database.
func (alcb *AccessLogCreateBulk) Save(ctx context.Context) ([]*AccessLog, error) {
	if alcb.err != nil {
		return nil, alcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(alcb.builders))
	nodes := make([]*AccessLog, len(alcb.builders))
	mutators := make([]Mutator, len(alcb.builders))
	for i := range alcb.builders {
		func(i int, root context.Context) {
			builder := alcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccessLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, alcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, alcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, alcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (alcb *AccessLogCreateBulk) SaveX(ctx context.Context) []*AccessLog {
	v, err := alcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alcb *AccessLogCreateBulk) Exec(ctx context.Context) error {
	_, err := alcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alcb *AccessLogCreateBulk) ExecX(ctx context.Context) {
	if err := alcb.Exec(ctx); err != nil {
		panic(err)
	}
}
