// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/google/uuid"
	"github.com/lucasbonna/contafacil_api/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/lucasbonna/contafacil_api/ent/accesslog"
	"github.com/lucasbonna/contafacil_api/ent/clients"
	"github.com/lucasbonna/contafacil_api/ent/emission"
	"github.com/lucasbonna/contafacil_api/ent/file"
	"github.com/lucasbonna/contafacil_api/ent/gnreemission"
	"github.com/lucasbonna/contafacil_api/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AccessLog is the client for interacting with the AccessLog builders.
	AccessLog *AccessLogClient
	// Clients is the client for interacting with the Clients builders.
	Clients *ClientsClient
	// Emission is the client for interacting with the Emission builders.
	Emission *EmissionClient
	// File is the client for interacting with the File builders.
	File *FileClient
	// GnreEmission is the client for interacting with the GnreEmission builders.
	GnreEmission *GnreEmissionClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AccessLog = NewAccessLogClient(c.config)
	c.Clients = NewClientsClient(c.config)
	c.Emission = NewEmissionClient(c.config)
	c.File = NewFileClient(c.config)
	c.GnreEmission = NewGnreEmissionClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		AccessLog:    NewAccessLogClient(cfg),
		Clients:      NewClientsClient(cfg),
		Emission:     NewEmissionClient(cfg),
		File:         NewFileClient(cfg),
		GnreEmission: NewGnreEmissionClient(cfg),
		User:         NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		AccessLog:    NewAccessLogClient(cfg),
		Clients:      NewClientsClient(cfg),
		Emission:     NewEmissionClient(cfg),
		File:         NewFileClient(cfg),
		GnreEmission: NewGnreEmissionClient(cfg),
		User:         NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AccessLog.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AccessLog, c.Clients, c.Emission, c.File, c.GnreEmission, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AccessLog, c.Clients, c.Emission, c.File, c.GnreEmission, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AccessLogMutation:
		return c.AccessLog.mutate(ctx, m)
	case *ClientsMutation:
		return c.Clients.mutate(ctx, m)
	case *EmissionMutation:
		return c.Emission.mutate(ctx, m)
	case *FileMutation:
		return c.File.mutate(ctx, m)
	case *GnreEmissionMutation:
		return c.GnreEmission.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AccessLogClient is a client for the AccessLog schema.
type AccessLogClient struct {
	config
}

// NewAccessLogClient returns a client for the AccessLog from the given config.
func NewAccessLogClient(c config) *AccessLogClient {
	return &AccessLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `accesslog.Hooks(f(g(h())))`.
func (c *AccessLogClient) Use(hooks ...Hook) {
	c.hooks.AccessLog = append(c.hooks.AccessLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `accesslog.Intercept(f(g(h())))`.
func (c *AccessLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.AccessLog = append(c.inters.AccessLog, interceptors...)
}

// Create returns a builder for creating a AccessLog entity.
func (c *AccessLogClient) Create() *AccessLogCreate {
	mutation := newAccessLogMutation(c.config, OpCreate)
	return &AccessLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AccessLog entities.
func (c *AccessLogClient) CreateBulk(builders ...*AccessLogCreate) *AccessLogCreateBulk {
	return &AccessLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AccessLogClient) MapCreateBulk(slice any, setFunc func(*AccessLogCreate, int)) *AccessLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AccessLogCreateBulk{err: fmt.Errorf("calling to AccessLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AccessLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AccessLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AccessLog.
func (c *AccessLogClient) Update() *AccessLogUpdate {
	mutation := newAccessLogMutation(c.config, OpUpdate)
	return &AccessLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccessLogClient) UpdateOne(al *AccessLog) *AccessLogUpdateOne {
	mutation := newAccessLogMutation(c.config, OpUpdateOne, withAccessLog(al))
	return &AccessLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccessLogClient) UpdateOneID(id uuid.UUID) *AccessLogUpdateOne {
	mutation := newAccessLogMutation(c.config, OpUpdateOne, withAccessLogID(id))
	return &AccessLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AccessLog.
func (c *AccessLogClient) Delete() *AccessLogDelete {
	mutation := newAccessLogMutation(c.config, OpDelete)
	return &AccessLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AccessLogClient) DeleteOne(al *AccessLog) *AccessLogDeleteOne {
	return c.DeleteOneID(al.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AccessLogClient) DeleteOneID(id uuid.UUID) *AccessLogDeleteOne {
	builder := c.Delete().Where(accesslog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccessLogDeleteOne{builder}
}

// Query returns a query builder for AccessLog.
func (c *AccessLogClient) Query() *AccessLogQuery {
	return &AccessLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAccessLog},
		inters: c.Interceptors(),
	}
}

// Get returns a AccessLog entity by its id.
func (c *AccessLogClient) Get(ctx context.Context, id uuid.UUID) (*AccessLog, error) {
	return c.Query().Where(accesslog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccessLogClient) GetX(ctx context.Context, id uuid.UUID) *AccessLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AccessLogClient) Hooks() []Hook {
	return c.hooks.AccessLog
}

// Interceptors returns the client interceptors.
func (c *AccessLogClient) Interceptors() []Interceptor {
	return c.inters.AccessLog
}

func (c *AccessLogClient) mutate(ctx context.Context, m *AccessLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AccessLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AccessLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AccessLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AccessLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AccessLog mutation op: %q", m.Op())
	}
}

// ClientsClient is a client for the Clients schema.
type ClientsClient struct {
	config
}

// NewClientsClient returns a client for the Clients from the given config.
func NewClientsClient(c config) *ClientsClient {
	return &ClientsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `clients.Hooks(f(g(h())))`.
func (c *ClientsClient) Use(hooks ...Hook) {
	c.hooks.Clients = append(c.hooks.Clients, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `clients.Intercept(f(g(h())))`.
func (c *ClientsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Clients = append(c.inters.Clients, interceptors...)
}

// Create returns a builder for creating a Clients entity.
func (c *ClientsClient) Create() *ClientsCreate {
	mutation := newClientsMutation(c.config, OpCreate)
	return &ClientsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Clients entities.
func (c *ClientsClient) CreateBulk(builders ...*ClientsCreate) *ClientsCreateBulk {
	return &ClientsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ClientsClient) MapCreateBulk(slice any, setFunc func(*ClientsCreate, int)) *ClientsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ClientsCreateBulk{err: fmt.Errorf("calling to ClientsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ClientsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ClientsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Clients.
func (c *ClientsClient) Update() *ClientsUpdate {
	mutation := newClientsMutation(c.config, OpUpdate)
	return &ClientsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClientsClient) UpdateOne(cl *Clients) *ClientsUpdateOne {
	mutation := newClientsMutation(c.config, OpUpdateOne, withClients(cl))
	return &ClientsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClientsClient) UpdateOneID(id uuid.UUID) *ClientsUpdateOne {
	mutation := newClientsMutation(c.config, OpUpdateOne, withClientsID(id))
	return &ClientsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Clients.
func (c *ClientsClient) Delete() *ClientsDelete {
	mutation := newClientsMutation(c.config, OpDelete)
	return &ClientsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ClientsClient) DeleteOne(cl *Clients) *ClientsDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ClientsClient) DeleteOneID(id uuid.UUID) *ClientsDeleteOne {
	builder := c.Delete().Where(clients.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClientsDeleteOne{builder}
}

// Query returns a query builder for Clients.
func (c *ClientsClient) Query() *ClientsQuery {
	return &ClientsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeClients},
		inters: c.Interceptors(),
	}
}

// Get returns a Clients entity by its id.
func (c *ClientsClient) Get(ctx context.Context, id uuid.UUID) (*Clients, error) {
	return c.Query().Where(clients.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClientsClient) GetX(ctx context.Context, id uuid.UUID) *Clients {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Clients.
func (c *ClientsClient) QueryUsers(cl *Clients) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(clients.Table, clients.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, clients.UsersTable, clients.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ClientsClient) Hooks() []Hook {
	return c.hooks.Clients
}

// Interceptors returns the client interceptors.
func (c *ClientsClient) Interceptors() []Interceptor {
	return c.inters.Clients
}

func (c *ClientsClient) mutate(ctx context.Context, m *ClientsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ClientsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ClientsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ClientsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ClientsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Clients mutation op: %q", m.Op())
	}
}

// EmissionClient is a client for the Emission schema.
type EmissionClient struct {
	config
}

// NewEmissionClient returns a client for the Emission from the given config.
func NewEmissionClient(c config) *EmissionClient {
	return &EmissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `emission.Hooks(f(g(h())))`.
func (c *EmissionClient) Use(hooks ...Hook) {
	c.hooks.Emission = append(c.hooks.Emission, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `emission.Intercept(f(g(h())))`.
func (c *EmissionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Emission = append(c.inters.Emission, interceptors...)
}

// Create returns a builder for creating a Emission entity.
func (c *EmissionClient) Create() *EmissionCreate {
	mutation := newEmissionMutation(c.config, OpCreate)
	return &EmissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Emission entities.
func (c *EmissionClient) CreateBulk(builders ...*EmissionCreate) *EmissionCreateBulk {
	return &EmissionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EmissionClient) MapCreateBulk(slice any, setFunc func(*EmissionCreate, int)) *EmissionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EmissionCreateBulk{err: fmt.Errorf("calling to EmissionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EmissionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EmissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Emission.
func (c *EmissionClient) Update() *EmissionUpdate {
	mutation := newEmissionMutation(c.config, OpUpdate)
	return &EmissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmissionClient) UpdateOne(e *Emission) *EmissionUpdateOne {
	mutation := newEmissionMutation(c.config, OpUpdateOne, withEmission(e))
	return &EmissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmissionClient) UpdateOneID(id uuid.UUID) *EmissionUpdateOne {
	mutation := newEmissionMutation(c.config, OpUpdateOne, withEmissionID(id))
	return &EmissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Emission.
func (c *EmissionClient) Delete() *EmissionDelete {
	mutation := newEmissionMutation(c.config, OpDelete)
	return &EmissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmissionClient) DeleteOne(e *Emission) *EmissionDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmissionClient) DeleteOneID(id uuid.UUID) *EmissionDeleteOne {
	builder := c.Delete().Where(emission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmissionDeleteOne{builder}
}

// Query returns a query builder for Emission.
func (c *EmissionClient) Query() *EmissionQuery {
	return &EmissionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmission},
		inters: c.Interceptors(),
	}
}

// Get returns a Emission entity by its id.
func (c *EmissionClient) Get(ctx context.Context, id uuid.UUID) (*Emission, error) {
	return c.Query().Where(emission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmissionClient) GetX(ctx context.Context, id uuid.UUID) *Emission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGnreEmission queries the gnre_emission edge of a Emission.
func (c *EmissionClient) QueryGnreEmission(e *Emission) *GnreEmissionQuery {
	query := (&GnreEmissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emission.Table, emission.FieldID, id),
			sqlgraph.To(gnreemission.Table, gnreemission.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, emission.GnreEmissionTable, emission.GnreEmissionColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmissionClient) Hooks() []Hook {
	return c.hooks.Emission
}

// Interceptors returns the client interceptors.
func (c *EmissionClient) Interceptors() []Interceptor {
	return c.inters.Emission
}

func (c *EmissionClient) mutate(ctx context.Context, m *EmissionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmissionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmissionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmissionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Emission mutation op: %q", m.Op())
	}
}

// FileClient is a client for the File schema.
type FileClient struct {
	config
}

// NewFileClient returns a client for the File from the given config.
func NewFileClient(c config) *FileClient {
	return &FileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `file.Hooks(f(g(h())))`.
func (c *FileClient) Use(hooks ...Hook) {
	c.hooks.File = append(c.hooks.File, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `file.Intercept(f(g(h())))`.
func (c *FileClient) Intercept(interceptors ...Interceptor) {
	c.inters.File = append(c.inters.File, interceptors...)
}

// Create returns a builder for creating a File entity.
func (c *FileClient) Create() *FileCreate {
	mutation := newFileMutation(c.config, OpCreate)
	return &FileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of File entities.
func (c *FileClient) CreateBulk(builders ...*FileCreate) *FileCreateBulk {
	return &FileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FileClient) MapCreateBulk(slice any, setFunc func(*FileCreate, int)) *FileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FileCreateBulk{err: fmt.Errorf("calling to FileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for File.
func (c *FileClient) Update() *FileUpdate {
	mutation := newFileMutation(c.config, OpUpdate)
	return &FileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FileClient) UpdateOne(f *File) *FileUpdateOne {
	mutation := newFileMutation(c.config, OpUpdateOne, withFile(f))
	return &FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FileClient) UpdateOneID(id uuid.UUID) *FileUpdateOne {
	mutation := newFileMutation(c.config, OpUpdateOne, withFileID(id))
	return &FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for File.
func (c *FileClient) Delete() *FileDelete {
	mutation := newFileMutation(c.config, OpDelete)
	return &FileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FileClient) DeleteOne(f *File) *FileDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FileClient) DeleteOneID(id uuid.UUID) *FileDeleteOne {
	builder := c.Delete().Where(file.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FileDeleteOne{builder}
}

// Query returns a query builder for File.
func (c *FileClient) Query() *FileQuery {
	return &FileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFile},
		inters: c.Interceptors(),
	}
}

// Get returns a File entity by its id.
func (c *FileClient) Get(ctx context.Context, id uuid.UUID) (*File, error) {
	return c.Query().Where(file.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FileClient) GetX(ctx context.Context, id uuid.UUID) *File {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FileClient) Hooks() []Hook {
	return c.hooks.File
}

// Interceptors returns the client interceptors.
func (c *FileClient) Interceptors() []Interceptor {
	return c.inters.File
}

func (c *FileClient) mutate(ctx context.Context, m *FileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown File mutation op: %q", m.Op())
	}
}

// GnreEmissionClient is a client for the GnreEmission schema.
type GnreEmissionClient struct {
	config
}

// NewGnreEmissionClient returns a client for the GnreEmission from the given config.
func NewGnreEmissionClient(c config) *GnreEmissionClient {
	return &GnreEmissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gnreemission.Hooks(f(g(h())))`.
func (c *GnreEmissionClient) Use(hooks ...Hook) {
	c.hooks.GnreEmission = append(c.hooks.GnreEmission, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `gnreemission.Intercept(f(g(h())))`.
func (c *GnreEmissionClient) Intercept(interceptors ...Interceptor) {
	c.inters.GnreEmission = append(c.inters.GnreEmission, interceptors...)
}

// Create returns a builder for creating a GnreEmission entity.
func (c *GnreEmissionClient) Create() *GnreEmissionCreate {
	mutation := newGnreEmissionMutation(c.config, OpCreate)
	return &GnreEmissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GnreEmission entities.
func (c *GnreEmissionClient) CreateBulk(builders ...*GnreEmissionCreate) *GnreEmissionCreateBulk {
	return &GnreEmissionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GnreEmissionClient) MapCreateBulk(slice any, setFunc func(*GnreEmissionCreate, int)) *GnreEmissionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GnreEmissionCreateBulk{err: fmt.Errorf("calling to GnreEmissionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GnreEmissionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GnreEmissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GnreEmission.
func (c *GnreEmissionClient) Update() *GnreEmissionUpdate {
	mutation := newGnreEmissionMutation(c.config, OpUpdate)
	return &GnreEmissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GnreEmissionClient) UpdateOne(ge *GnreEmission) *GnreEmissionUpdateOne {
	mutation := newGnreEmissionMutation(c.config, OpUpdateOne, withGnreEmission(ge))
	return &GnreEmissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GnreEmissionClient) UpdateOneID(id uuid.UUID) *GnreEmissionUpdateOne {
	mutation := newGnreEmissionMutation(c.config, OpUpdateOne, withGnreEmissionID(id))
	return &GnreEmissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GnreEmission.
func (c *GnreEmissionClient) Delete() *GnreEmissionDelete {
	mutation := newGnreEmissionMutation(c.config, OpDelete)
	return &GnreEmissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GnreEmissionClient) DeleteOne(ge *GnreEmission) *GnreEmissionDeleteOne {
	return c.DeleteOneID(ge.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GnreEmissionClient) DeleteOneID(id uuid.UUID) *GnreEmissionDeleteOne {
	builder := c.Delete().Where(gnreemission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GnreEmissionDeleteOne{builder}
}

// Query returns a query builder for GnreEmission.
func (c *GnreEmissionClient) Query() *GnreEmissionQuery {
	return &GnreEmissionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGnreEmission},
		inters: c.Interceptors(),
	}
}

// Get returns a GnreEmission entity by its id.
func (c *GnreEmissionClient) Get(ctx context.Context, id uuid.UUID) (*GnreEmission, error) {
	return c.Query().Where(gnreemission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GnreEmissionClient) GetX(ctx context.Context, id uuid.UUID) *GnreEmission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEmission queries the emission edge of a GnreEmission.
func (c *GnreEmissionClient) QueryEmission(ge *GnreEmission) *EmissionQuery {
	query := (&EmissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ge.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gnreemission.Table, gnreemission.FieldID, id),
			sqlgraph.To(emission.Table, emission.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, gnreemission.EmissionTable, gnreemission.EmissionColumn),
		)
		fromV = sqlgraph.Neighbors(ge.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GnreEmissionClient) Hooks() []Hook {
	return c.hooks.GnreEmission
}

// Interceptors returns the client interceptors.
func (c *GnreEmissionClient) Interceptors() []Interceptor {
	return c.inters.GnreEmission
}

func (c *GnreEmissionClient) mutate(ctx context.Context, m *GnreEmissionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GnreEmissionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GnreEmissionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GnreEmissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GnreEmissionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GnreEmission mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryClients queries the clients edge of a User.
func (c *UserClient) QueryClients(u *User) *ClientsQuery {
	query := (&ClientsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(clients.Table, clients.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.ClientsTable, user.ClientsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AccessLog, Clients, Emission, File, GnreEmission, User []ent.Hook
	}
	inters struct {
		AccessLog, Clients, Emission, File, GnreEmission, User []ent.Interceptor
	}
)
