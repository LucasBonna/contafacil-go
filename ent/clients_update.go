// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lucasbonna/contafacil_api/ent/clients"
	"github.com/lucasbonna/contafacil_api/ent/predicate"
	"github.com/lucasbonna/contafacil_api/ent/user"
)

// ClientsUpdate is the builder for updating Clients entities.
type ClientsUpdate struct {
	config
	hooks    []Hook
	mutation *ClientsMutation
}

// Where appends a list predicates to the ClientsUpdate builder.
func (cu *ClientsUpdate) Where(ps ...predicate.Clients) *ClientsUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *ClientsUpdate) SetName(s string) *ClientsUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *ClientsUpdate) SetNillableName(s *string) *ClientsUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetCnpj sets the "cnpj" field.
func (cu *ClientsUpdate) SetCnpj(s string) *ClientsUpdate {
	cu.mutation.SetCnpj(s)
	return cu
}

// SetNillableCnpj sets the "cnpj" field if the given value is not nil.
func (cu *ClientsUpdate) SetNillableCnpj(s *string) *ClientsUpdate {
	if s != nil {
		cu.SetCnpj(*s)
	}
	return cu
}

// SetRole sets the "role" field.
func (cu *ClientsUpdate) SetRole(c clients.Role) *ClientsUpdate {
	cu.mutation.SetRole(c)
	return cu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (cu *ClientsUpdate) SetNillableRole(c *clients.Role) *ClientsUpdate {
	if c != nil {
		cu.SetRole(*c)
	}
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *ClientsUpdate) SetCreatedAt(t time.Time) *ClientsUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *ClientsUpdate) SetNillableCreatedAt(t *time.Time) *ClientsUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ClientsUpdate) SetUpdatedAt(t time.Time) *ClientsUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cu *ClientsUpdate) SetNillableUpdatedAt(t *time.Time) *ClientsUpdate {
	if t != nil {
		cu.SetUpdatedAt(*t)
	}
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *ClientsUpdate) SetDeletedAt(t time.Time) *ClientsUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *ClientsUpdate) SetNillableDeletedAt(t *time.Time) *ClientsUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *ClientsUpdate) ClearDeletedAt() *ClientsUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (cu *ClientsUpdate) AddUserIDs(ids ...uuid.UUID) *ClientsUpdate {
	cu.mutation.AddUserIDs(ids...)
	return cu
}

// AddUsers adds the "users" edges to the User entity.
func (cu *ClientsUpdate) AddUsers(u ...*User) *ClientsUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.AddUserIDs(ids...)
}

// Mutation returns the ClientsMutation object of the builder.
func (cu *ClientsUpdate) Mutation() *ClientsMutation {
	return cu.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (cu *ClientsUpdate) ClearUsers() *ClientsUpdate {
	cu.mutation.ClearUsers()
	return cu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (cu *ClientsUpdate) RemoveUserIDs(ids ...uuid.UUID) *ClientsUpdate {
	cu.mutation.RemoveUserIDs(ids...)
	return cu
}

// RemoveUsers removes "users" edges to User entities.
func (cu *ClientsUpdate) RemoveUsers(u ...*User) *ClientsUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ClientsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ClientsUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ClientsUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ClientsUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ClientsUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := clients.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Clients.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Cnpj(); ok {
		if err := clients.CnpjValidator(v); err != nil {
			return &ValidationError{Name: "cnpj", err: fmt.Errorf(`ent: validator failed for field "Clients.cnpj": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Role(); ok {
		if err := clients.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "Clients.role": %w`, err)}
		}
	}
	return nil
}

func (cu *ClientsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(clients.Table, clients.Columns, sqlgraph.NewFieldSpec(clients.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(clients.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Cnpj(); ok {
		_spec.SetField(clients.FieldCnpj, field.TypeString, value)
	}
	if value, ok := cu.mutation.Role(); ok {
		_spec.SetField(clients.FieldRole, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(clients.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(clients.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(clients.FieldDeletedAt, field.TypeTime, value)
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.ClearField(clients.FieldDeletedAt, field.TypeTime)
	}
	if cu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.UsersTable,
			Columns: []string{clients.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !cu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.UsersTable,
			Columns: []string{clients.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.UsersTable,
			Columns: []string{clients.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clients.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ClientsUpdateOne is the builder for updating a single Clients entity.
type ClientsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClientsMutation
}

// SetName sets the "name" field.
func (cuo *ClientsUpdateOne) SetName(s string) *ClientsUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *ClientsUpdateOne) SetNillableName(s *string) *ClientsUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetCnpj sets the "cnpj" field.
func (cuo *ClientsUpdateOne) SetCnpj(s string) *ClientsUpdateOne {
	cuo.mutation.SetCnpj(s)
	return cuo
}

// SetNillableCnpj sets the "cnpj" field if the given value is not nil.
func (cuo *ClientsUpdateOne) SetNillableCnpj(s *string) *ClientsUpdateOne {
	if s != nil {
		cuo.SetCnpj(*s)
	}
	return cuo
}

// SetRole sets the "role" field.
func (cuo *ClientsUpdateOne) SetRole(c clients.Role) *ClientsUpdateOne {
	cuo.mutation.SetRole(c)
	return cuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (cuo *ClientsUpdateOne) SetNillableRole(c *clients.Role) *ClientsUpdateOne {
	if c != nil {
		cuo.SetRole(*c)
	}
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *ClientsUpdateOne) SetCreatedAt(t time.Time) *ClientsUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *ClientsUpdateOne) SetNillableCreatedAt(t *time.Time) *ClientsUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ClientsUpdateOne) SetUpdatedAt(t time.Time) *ClientsUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cuo *ClientsUpdateOne) SetNillableUpdatedAt(t *time.Time) *ClientsUpdateOne {
	if t != nil {
		cuo.SetUpdatedAt(*t)
	}
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *ClientsUpdateOne) SetDeletedAt(t time.Time) *ClientsUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *ClientsUpdateOne) SetNillableDeletedAt(t *time.Time) *ClientsUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *ClientsUpdateOne) ClearDeletedAt() *ClientsUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (cuo *ClientsUpdateOne) AddUserIDs(ids ...uuid.UUID) *ClientsUpdateOne {
	cuo.mutation.AddUserIDs(ids...)
	return cuo
}

// AddUsers adds the "users" edges to the User entity.
func (cuo *ClientsUpdateOne) AddUsers(u ...*User) *ClientsUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.AddUserIDs(ids...)
}

// Mutation returns the ClientsMutation object of the builder.
func (cuo *ClientsUpdateOne) Mutation() *ClientsMutation {
	return cuo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (cuo *ClientsUpdateOne) ClearUsers() *ClientsUpdateOne {
	cuo.mutation.ClearUsers()
	return cuo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (cuo *ClientsUpdateOne) RemoveUserIDs(ids ...uuid.UUID) *ClientsUpdateOne {
	cuo.mutation.RemoveUserIDs(ids...)
	return cuo
}

// RemoveUsers removes "users" edges to User entities.
func (cuo *ClientsUpdateOne) RemoveUsers(u ...*User) *ClientsUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.RemoveUserIDs(ids...)
}

// Where appends a list predicates to the ClientsUpdate builder.
func (cuo *ClientsUpdateOne) Where(ps ...predicate.Clients) *ClientsUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ClientsUpdateOne) Select(field string, fields ...string) *ClientsUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Clients entity.
func (cuo *ClientsUpdateOne) Save(ctx context.Context) (*Clients, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ClientsUpdateOne) SaveX(ctx context.Context) *Clients {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ClientsUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ClientsUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ClientsUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := clients.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Clients.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Cnpj(); ok {
		if err := clients.CnpjValidator(v); err != nil {
			return &ValidationError{Name: "cnpj", err: fmt.Errorf(`ent: validator failed for field "Clients.cnpj": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Role(); ok {
		if err := clients.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "Clients.role": %w`, err)}
		}
	}
	return nil
}

func (cuo *ClientsUpdateOne) sqlSave(ctx context.Context) (_node *Clients, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(clients.Table, clients.Columns, sqlgraph.NewFieldSpec(clients.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Clients.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, clients.FieldID)
		for _, f := range fields {
			if !clients.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != clients.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(clients.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Cnpj(); ok {
		_spec.SetField(clients.FieldCnpj, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Role(); ok {
		_spec.SetField(clients.FieldRole, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(clients.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(clients.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(clients.FieldDeletedAt, field.TypeTime, value)
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.ClearField(clients.FieldDeletedAt, field.TypeTime)
	}
	if cuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.UsersTable,
			Columns: []string{clients.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !cuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.UsersTable,
			Columns: []string{clients.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.UsersTable,
			Columns: []string{clients.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Clients{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clients.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
