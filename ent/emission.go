// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lucasbonna/contafacil_api/ent/emission"
	"github.com/lucasbonna/contafacil_api/ent/gnreemission"
)

// Emission is the model entity for the Emission schema.
type Emission struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// EmissionType holds the value of the "emission_type" field.
	EmissionType emission.EmissionType `json:"emission_type,omitempty"`
	// ClientID holds the value of the "client_id" field.
	ClientID uuid.UUID `json:"client_id,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// Status holds the value of the "status" field.
	Status emission.Status `json:"status,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmissionQuery when eager-loading is set.
	Edges        EmissionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EmissionEdges holds the relations/edges for other nodes in the graph.
type EmissionEdges struct {
	// GnreEmission holds the value of the gnre_emission edge.
	GnreEmission *GnreEmission `json:"gnre_emission,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GnreEmissionOrErr returns the GnreEmission value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmissionEdges) GnreEmissionOrErr() (*GnreEmission, error) {
	if e.GnreEmission != nil {
		return e.GnreEmission, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: gnreemission.Label}
	}
	return nil, &NotLoadedError{edge: "gnre_emission"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Emission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case emission.FieldEmissionType, emission.FieldMessage, emission.FieldStatus:
			values[i] = new(sql.NullString)
		case emission.FieldCreatedAt, emission.FieldUpdatedAt, emission.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case emission.FieldID, emission.FieldClientID, emission.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Emission fields.
func (e *Emission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case emission.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				e.ID = *value
			}
		case emission.FieldEmissionType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field emission_type", values[i])
			} else if value.Valid {
				e.EmissionType = emission.EmissionType(value.String)
			}
		case emission.FieldClientID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value != nil {
				e.ClientID = *value
			}
		case emission.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				e.Message = value.String
			}
		case emission.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				e.Status = emission.Status(value.String)
			}
		case emission.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				e.UserID = *value
			}
		case emission.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case emission.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case emission.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				e.DeletedAt = value.Time
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Emission.
// This includes values selected through modifiers, order, etc.
func (e *Emission) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryGnreEmission queries the "gnre_emission" edge of the Emission entity.
func (e *Emission) QueryGnreEmission() *GnreEmissionQuery {
	return NewEmissionClient(e.config).QueryGnreEmission(e)
}

// Update returns a builder for updating this Emission.
// Note that you need to call Emission.Unwrap() before calling this method if this Emission
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Emission) Update() *EmissionUpdateOne {
	return NewEmissionClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Emission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Emission) Unwrap() *Emission {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Emission is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Emission) String() string {
	var builder strings.Builder
	builder.WriteString("Emission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("emission_type=")
	builder.WriteString(fmt.Sprintf("%v", e.EmissionType))
	builder.WriteString(", ")
	builder.WriteString("client_id=")
	builder.WriteString(fmt.Sprintf("%v", e.ClientID))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(e.Message)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", e.Status))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", e.UserID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(e.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Emissions is a parsable slice of Emission.
type Emissions []*Emission
