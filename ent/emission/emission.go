// Code generated by ent, DO NOT EDIT.

package emission

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the emission type in the database.
	Label = "emission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmissionType holds the string denoting the emission_type field in the database.
	FieldEmissionType = "emission_type"
	// FieldClientID holds the string denoting the client_id field in the database.
	FieldClientID = "client_id"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeGnreEmission holds the string denoting the gnre_emission edge name in mutations.
	EdgeGnreEmission = "gnre_emission"
	// Table holds the table name of the emission in the database.
	Table = "emissions"
	// GnreEmissionTable is the table that holds the gnre_emission relation/edge.
	GnreEmissionTable = "gnre_emission"
	// GnreEmissionInverseTable is the table name for the GnreEmission entity.
	// It exists in this package in order to avoid circular dependency with the "gnreemission" package.
	GnreEmissionInverseTable = "gnre_emission"
	// GnreEmissionColumn is the table column denoting the gnre_emission relation/edge.
	GnreEmissionColumn = "emission_gnre_emission"
)

// Columns holds all SQL columns for emission fields.
var Columns = []string{
	FieldID,
	FieldEmissionType,
	FieldClientID,
	FieldMessage,
	FieldStatus,
	FieldUserID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
)

// EmissionType defines the type for the "emission_type" enum field.
type EmissionType string

// EmissionType values.
const (
	EmissionTypeGNRE EmissionType = "GNRE"
)

func (et EmissionType) String() string {
	return string(et)
}

// EmissionTypeValidator is a validator for the "emission_type" field enum values. It is called by the builders before save.
func EmissionTypeValidator(et EmissionType) error {
	switch et {
	case EmissionTypeGNRE:
		return nil
	default:
		return fmt.Errorf("emission: invalid enum value for emission_type field: %q", et)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPROCESSING Status = "PROCESSING"
	StatusFAILED     Status = "FAILED"
	StatusFINISHED   Status = "FINISHED"
	StatusEXCEPTION  Status = "EXCEPTION"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPROCESSING, StatusFAILED, StatusFINISHED, StatusEXCEPTION:
		return nil
	default:
		return fmt.Errorf("emission: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Emission queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmissionType orders the results by the emission_type field.
func ByEmissionType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmissionType, opts...).ToFunc()
}

// ByClientID orders the results by the client_id field.
func ByClientID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientID, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByGnreEmissionField orders the results by gnre_emission field.
func ByGnreEmissionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGnreEmissionStep(), sql.OrderByField(field, opts...))
	}
}
func newGnreEmissionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GnreEmissionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, GnreEmissionTable, GnreEmissionColumn),
	)
}
