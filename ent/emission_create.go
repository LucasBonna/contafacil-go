// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lucasbonna/contafacil_api/ent/emission"
	"github.com/lucasbonna/contafacil_api/ent/gnreemission"
)

// EmissionCreate is the builder for creating a Emission entity.
type EmissionCreate struct {
	config
	mutation *EmissionMutation
	hooks    []Hook
}

// SetEmissionType sets the "emission_type" field.
func (ec *EmissionCreate) SetEmissionType(et emission.EmissionType) *EmissionCreate {
	ec.mutation.SetEmissionType(et)
	return ec
}

// SetClientID sets the "client_id" field.
func (ec *EmissionCreate) SetClientID(u uuid.UUID) *EmissionCreate {
	ec.mutation.SetClientID(u)
	return ec
}

// SetMessage sets the "message" field.
func (ec *EmissionCreate) SetMessage(s string) *EmissionCreate {
	ec.mutation.SetMessage(s)
	return ec
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (ec *EmissionCreate) SetNillableMessage(s *string) *EmissionCreate {
	if s != nil {
		ec.SetMessage(*s)
	}
	return ec
}

// SetStatus sets the "status" field.
func (ec *EmissionCreate) SetStatus(e emission.Status) *EmissionCreate {
	ec.mutation.SetStatus(e)
	return ec
}

// SetUserID sets the "user_id" field.
func (ec *EmissionCreate) SetUserID(u uuid.UUID) *EmissionCreate {
	ec.mutation.SetUserID(u)
	return ec
}

// SetCreatedAt sets the "created_at" field.
func (ec *EmissionCreate) SetCreatedAt(t time.Time) *EmissionCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EmissionCreate) SetNillableCreatedAt(t *time.Time) *EmissionCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EmissionCreate) SetUpdatedAt(t time.Time) *EmissionCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EmissionCreate) SetNillableUpdatedAt(t *time.Time) *EmissionCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetDeletedAt sets the "deleted_at" field.
func (ec *EmissionCreate) SetDeletedAt(t time.Time) *EmissionCreate {
	ec.mutation.SetDeletedAt(t)
	return ec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ec *EmissionCreate) SetNillableDeletedAt(t *time.Time) *EmissionCreate {
	if t != nil {
		ec.SetDeletedAt(*t)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *EmissionCreate) SetID(u uuid.UUID) *EmissionCreate {
	ec.mutation.SetID(u)
	return ec
}

// SetGnreEmissionID sets the "gnre_emission" edge to the GnreEmission entity by ID.
func (ec *EmissionCreate) SetGnreEmissionID(id uuid.UUID) *EmissionCreate {
	ec.mutation.SetGnreEmissionID(id)
	return ec
}

// SetNillableGnreEmissionID sets the "gnre_emission" edge to the GnreEmission entity by ID if the given value is not nil.
func (ec *EmissionCreate) SetNillableGnreEmissionID(id *uuid.UUID) *EmissionCreate {
	if id != nil {
		ec = ec.SetGnreEmissionID(*id)
	}
	return ec
}

// SetGnreEmission sets the "gnre_emission" edge to the GnreEmission entity.
func (ec *EmissionCreate) SetGnreEmission(g *GnreEmission) *EmissionCreate {
	return ec.SetGnreEmissionID(g.ID)
}

// Mutation returns the EmissionMutation object of the builder.
func (ec *EmissionCreate) Mutation() *EmissionMutation {
	return ec.mutation
}

// Save creates the Emission in the database.
func (ec *EmissionCreate) Save(ctx context.Context) (*Emission, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EmissionCreate) SaveX(ctx context.Context) *Emission {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EmissionCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EmissionCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EmissionCreate) defaults() {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := emission.DefaultCreatedAt
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		v := emission.DefaultUpdatedAt
		ec.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EmissionCreate) check() error {
	if _, ok := ec.mutation.EmissionType(); !ok {
		return &ValidationError{Name: "emission_type", err: errors.New(`ent: missing required field "Emission.emission_type"`)}
	}
	if v, ok := ec.mutation.EmissionType(); ok {
		if err := emission.EmissionTypeValidator(v); err != nil {
			return &ValidationError{Name: "emission_type", err: fmt.Errorf(`ent: validator failed for field "Emission.emission_type": %w`, err)}
		}
	}
	if _, ok := ec.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "Emission.client_id"`)}
	}
	if _, ok := ec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Emission.status"`)}
	}
	if v, ok := ec.mutation.Status(); ok {
		if err := emission.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Emission.status": %w`, err)}
		}
	}
	if _, ok := ec.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Emission.user_id"`)}
	}
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Emission.created_at"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Emission.updated_at"`)}
	}
	return nil
}

func (ec *EmissionCreate) sqlSave(ctx context.Context) (*Emission, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EmissionCreate) createSpec() (*Emission, *sqlgraph.CreateSpec) {
	var (
		_node = &Emission{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(emission.Table, sqlgraph.NewFieldSpec(emission.FieldID, field.TypeUUID))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ec.mutation.EmissionType(); ok {
		_spec.SetField(emission.FieldEmissionType, field.TypeEnum, value)
		_node.EmissionType = value
	}
	if value, ok := ec.mutation.ClientID(); ok {
		_spec.SetField(emission.FieldClientID, field.TypeUUID, value)
		_node.ClientID = value
	}
	if value, ok := ec.mutation.Message(); ok {
		_spec.SetField(emission.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := ec.mutation.Status(); ok {
		_spec.SetField(emission.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := ec.mutation.UserID(); ok {
		_spec.SetField(emission.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(emission.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(emission.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.DeletedAt(); ok {
		_spec.SetField(emission.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := ec.mutation.GnreEmissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   emission.GnreEmissionTable,
			Columns: []string{emission.GnreEmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gnreemission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EmissionCreateBulk is the builder for creating many Emission entities in bulk.
type EmissionCreateBulk struct {
	config
	err      error
	builders []*EmissionCreate
}

// Save creates the Emission entities in the database.
func (ecb *EmissionCreateBulk) Save(ctx context.Context) ([]*Emission, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Emission, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EmissionCreateBulk) SaveX(ctx context.Context) []*Emission {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EmissionCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EmissionCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
