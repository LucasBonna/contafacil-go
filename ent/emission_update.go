// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lucasbonna/contafacil_api/ent/emission"
	"github.com/lucasbonna/contafacil_api/ent/gnreemission"
	"github.com/lucasbonna/contafacil_api/ent/predicate"
)

// EmissionUpdate is the builder for updating Emission entities.
type EmissionUpdate struct {
	config
	hooks    []Hook
	mutation *EmissionMutation
}

// Where appends a list predicates to the EmissionUpdate builder.
func (eu *EmissionUpdate) Where(ps ...predicate.Emission) *EmissionUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetEmissionType sets the "emission_type" field.
func (eu *EmissionUpdate) SetEmissionType(et emission.EmissionType) *EmissionUpdate {
	eu.mutation.SetEmissionType(et)
	return eu
}

// SetNillableEmissionType sets the "emission_type" field if the given value is not nil.
func (eu *EmissionUpdate) SetNillableEmissionType(et *emission.EmissionType) *EmissionUpdate {
	if et != nil {
		eu.SetEmissionType(*et)
	}
	return eu
}

// SetClientID sets the "client_id" field.
func (eu *EmissionUpdate) SetClientID(u uuid.UUID) *EmissionUpdate {
	eu.mutation.SetClientID(u)
	return eu
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (eu *EmissionUpdate) SetNillableClientID(u *uuid.UUID) *EmissionUpdate {
	if u != nil {
		eu.SetClientID(*u)
	}
	return eu
}

// SetMessage sets the "message" field.
func (eu *EmissionUpdate) SetMessage(s string) *EmissionUpdate {
	eu.mutation.SetMessage(s)
	return eu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (eu *EmissionUpdate) SetNillableMessage(s *string) *EmissionUpdate {
	if s != nil {
		eu.SetMessage(*s)
	}
	return eu
}

// ClearMessage clears the value of the "message" field.
func (eu *EmissionUpdate) ClearMessage() *EmissionUpdate {
	eu.mutation.ClearMessage()
	return eu
}

// SetStatus sets the "status" field.
func (eu *EmissionUpdate) SetStatus(e emission.Status) *EmissionUpdate {
	eu.mutation.SetStatus(e)
	return eu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (eu *EmissionUpdate) SetNillableStatus(e *emission.Status) *EmissionUpdate {
	if e != nil {
		eu.SetStatus(*e)
	}
	return eu
}

// SetUserID sets the "user_id" field.
func (eu *EmissionUpdate) SetUserID(u uuid.UUID) *EmissionUpdate {
	eu.mutation.SetUserID(u)
	return eu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (eu *EmissionUpdate) SetNillableUserID(u *uuid.UUID) *EmissionUpdate {
	if u != nil {
		eu.SetUserID(*u)
	}
	return eu
}

// SetCreatedAt sets the "created_at" field.
func (eu *EmissionUpdate) SetCreatedAt(t time.Time) *EmissionUpdate {
	eu.mutation.SetCreatedAt(t)
	return eu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eu *EmissionUpdate) SetNillableCreatedAt(t *time.Time) *EmissionUpdate {
	if t != nil {
		eu.SetCreatedAt(*t)
	}
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EmissionUpdate) SetUpdatedAt(t time.Time) *EmissionUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (eu *EmissionUpdate) SetNillableUpdatedAt(t *time.Time) *EmissionUpdate {
	if t != nil {
		eu.SetUpdatedAt(*t)
	}
	return eu
}

// SetDeletedAt sets the "deleted_at" field.
func (eu *EmissionUpdate) SetDeletedAt(t time.Time) *EmissionUpdate {
	eu.mutation.SetDeletedAt(t)
	return eu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eu *EmissionUpdate) SetNillableDeletedAt(t *time.Time) *EmissionUpdate {
	if t != nil {
		eu.SetDeletedAt(*t)
	}
	return eu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eu *EmissionUpdate) ClearDeletedAt() *EmissionUpdate {
	eu.mutation.ClearDeletedAt()
	return eu
}

// SetGnreEmissionID sets the "gnre_emission" edge to the GnreEmission entity by ID.
func (eu *EmissionUpdate) SetGnreEmissionID(id uuid.UUID) *EmissionUpdate {
	eu.mutation.SetGnreEmissionID(id)
	return eu
}

// SetNillableGnreEmissionID sets the "gnre_emission" edge to the GnreEmission entity by ID if the given value is not nil.
func (eu *EmissionUpdate) SetNillableGnreEmissionID(id *uuid.UUID) *EmissionUpdate {
	if id != nil {
		eu = eu.SetGnreEmissionID(*id)
	}
	return eu
}

// SetGnreEmission sets the "gnre_emission" edge to the GnreEmission entity.
func (eu *EmissionUpdate) SetGnreEmission(g *GnreEmission) *EmissionUpdate {
	return eu.SetGnreEmissionID(g.ID)
}

// Mutation returns the EmissionMutation object of the builder.
func (eu *EmissionUpdate) Mutation() *EmissionMutation {
	return eu.mutation
}

// ClearGnreEmission clears the "gnre_emission" edge to the GnreEmission entity.
func (eu *EmissionUpdate) ClearGnreEmission() *EmissionUpdate {
	eu.mutation.ClearGnreEmission()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EmissionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EmissionUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EmissionUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EmissionUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EmissionUpdate) check() error {
	if v, ok := eu.mutation.EmissionType(); ok {
		if err := emission.EmissionTypeValidator(v); err != nil {
			return &ValidationError{Name: "emission_type", err: fmt.Errorf(`ent: validator failed for field "Emission.emission_type": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Status(); ok {
		if err := emission.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Emission.status": %w`, err)}
		}
	}
	return nil
}

func (eu *EmissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(emission.Table, emission.Columns, sqlgraph.NewFieldSpec(emission.FieldID, field.TypeUUID))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.EmissionType(); ok {
		_spec.SetField(emission.FieldEmissionType, field.TypeEnum, value)
	}
	if value, ok := eu.mutation.ClientID(); ok {
		_spec.SetField(emission.FieldClientID, field.TypeUUID, value)
	}
	if value, ok := eu.mutation.Message(); ok {
		_spec.SetField(emission.FieldMessage, field.TypeString, value)
	}
	if eu.mutation.MessageCleared() {
		_spec.ClearField(emission.FieldMessage, field.TypeString)
	}
	if value, ok := eu.mutation.Status(); ok {
		_spec.SetField(emission.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := eu.mutation.UserID(); ok {
		_spec.SetField(emission.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := eu.mutation.CreatedAt(); ok {
		_spec.SetField(emission.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(emission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.DeletedAt(); ok {
		_spec.SetField(emission.FieldDeletedAt, field.TypeTime, value)
	}
	if eu.mutation.DeletedAtCleared() {
		_spec.ClearField(emission.FieldDeletedAt, field.TypeTime)
	}
	if eu.mutation.GnreEmissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   emission.GnreEmissionTable,
			Columns: []string{emission.GnreEmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gnreemission.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.GnreEmissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   emission.GnreEmissionTable,
			Columns: []string{emission.GnreEmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gnreemission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EmissionUpdateOne is the builder for updating a single Emission entity.
type EmissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmissionMutation
}

// SetEmissionType sets the "emission_type" field.
func (euo *EmissionUpdateOne) SetEmissionType(et emission.EmissionType) *EmissionUpdateOne {
	euo.mutation.SetEmissionType(et)
	return euo
}

// SetNillableEmissionType sets the "emission_type" field if the given value is not nil.
func (euo *EmissionUpdateOne) SetNillableEmissionType(et *emission.EmissionType) *EmissionUpdateOne {
	if et != nil {
		euo.SetEmissionType(*et)
	}
	return euo
}

// SetClientID sets the "client_id" field.
func (euo *EmissionUpdateOne) SetClientID(u uuid.UUID) *EmissionUpdateOne {
	euo.mutation.SetClientID(u)
	return euo
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (euo *EmissionUpdateOne) SetNillableClientID(u *uuid.UUID) *EmissionUpdateOne {
	if u != nil {
		euo.SetClientID(*u)
	}
	return euo
}

// SetMessage sets the "message" field.
func (euo *EmissionUpdateOne) SetMessage(s string) *EmissionUpdateOne {
	euo.mutation.SetMessage(s)
	return euo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (euo *EmissionUpdateOne) SetNillableMessage(s *string) *EmissionUpdateOne {
	if s != nil {
		euo.SetMessage(*s)
	}
	return euo
}

// ClearMessage clears the value of the "message" field.
func (euo *EmissionUpdateOne) ClearMessage() *EmissionUpdateOne {
	euo.mutation.ClearMessage()
	return euo
}

// SetStatus sets the "status" field.
func (euo *EmissionUpdateOne) SetStatus(e emission.Status) *EmissionUpdateOne {
	euo.mutation.SetStatus(e)
	return euo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (euo *EmissionUpdateOne) SetNillableStatus(e *emission.Status) *EmissionUpdateOne {
	if e != nil {
		euo.SetStatus(*e)
	}
	return euo
}

// SetUserID sets the "user_id" field.
func (euo *EmissionUpdateOne) SetUserID(u uuid.UUID) *EmissionUpdateOne {
	euo.mutation.SetUserID(u)
	return euo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (euo *EmissionUpdateOne) SetNillableUserID(u *uuid.UUID) *EmissionUpdateOne {
	if u != nil {
		euo.SetUserID(*u)
	}
	return euo
}

// SetCreatedAt sets the "created_at" field.
func (euo *EmissionUpdateOne) SetCreatedAt(t time.Time) *EmissionUpdateOne {
	euo.mutation.SetCreatedAt(t)
	return euo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (euo *EmissionUpdateOne) SetNillableCreatedAt(t *time.Time) *EmissionUpdateOne {
	if t != nil {
		euo.SetCreatedAt(*t)
	}
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EmissionUpdateOne) SetUpdatedAt(t time.Time) *EmissionUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (euo *EmissionUpdateOne) SetNillableUpdatedAt(t *time.Time) *EmissionUpdateOne {
	if t != nil {
		euo.SetUpdatedAt(*t)
	}
	return euo
}

// SetDeletedAt sets the "deleted_at" field.
func (euo *EmissionUpdateOne) SetDeletedAt(t time.Time) *EmissionUpdateOne {
	euo.mutation.SetDeletedAt(t)
	return euo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (euo *EmissionUpdateOne) SetNillableDeletedAt(t *time.Time) *EmissionUpdateOne {
	if t != nil {
		euo.SetDeletedAt(*t)
	}
	return euo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (euo *EmissionUpdateOne) ClearDeletedAt() *EmissionUpdateOne {
	euo.mutation.ClearDeletedAt()
	return euo
}

// SetGnreEmissionID sets the "gnre_emission" edge to the GnreEmission entity by ID.
func (euo *EmissionUpdateOne) SetGnreEmissionID(id uuid.UUID) *EmissionUpdateOne {
	euo.mutation.SetGnreEmissionID(id)
	return euo
}

// SetNillableGnreEmissionID sets the "gnre_emission" edge to the GnreEmission entity by ID if the given value is not nil.
func (euo *EmissionUpdateOne) SetNillableGnreEmissionID(id *uuid.UUID) *EmissionUpdateOne {
	if id != nil {
		euo = euo.SetGnreEmissionID(*id)
	}
	return euo
}

// SetGnreEmission sets the "gnre_emission" edge to the GnreEmission entity.
func (euo *EmissionUpdateOne) SetGnreEmission(g *GnreEmission) *EmissionUpdateOne {
	return euo.SetGnreEmissionID(g.ID)
}

// Mutation returns the EmissionMutation object of the builder.
func (euo *EmissionUpdateOne) Mutation() *EmissionMutation {
	return euo.mutation
}

// ClearGnreEmission clears the "gnre_emission" edge to the GnreEmission entity.
func (euo *EmissionUpdateOne) ClearGnreEmission() *EmissionUpdateOne {
	euo.mutation.ClearGnreEmission()
	return euo
}

// Where appends a list predicates to the EmissionUpdate builder.
func (euo *EmissionUpdateOne) Where(ps ...predicate.Emission) *EmissionUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EmissionUpdateOne) Select(field string, fields ...string) *EmissionUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Emission entity.
func (euo *EmissionUpdateOne) Save(ctx context.Context) (*Emission, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EmissionUpdateOne) SaveX(ctx context.Context) *Emission {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EmissionUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EmissionUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EmissionUpdateOne) check() error {
	if v, ok := euo.mutation.EmissionType(); ok {
		if err := emission.EmissionTypeValidator(v); err != nil {
			return &ValidationError{Name: "emission_type", err: fmt.Errorf(`ent: validator failed for field "Emission.emission_type": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Status(); ok {
		if err := emission.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Emission.status": %w`, err)}
		}
	}
	return nil
}

func (euo *EmissionUpdateOne) sqlSave(ctx context.Context) (_node *Emission, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(emission.Table, emission.Columns, sqlgraph.NewFieldSpec(emission.FieldID, field.TypeUUID))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Emission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emission.FieldID)
		for _, f := range fields {
			if !emission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != emission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.EmissionType(); ok {
		_spec.SetField(emission.FieldEmissionType, field.TypeEnum, value)
	}
	if value, ok := euo.mutation.ClientID(); ok {
		_spec.SetField(emission.FieldClientID, field.TypeUUID, value)
	}
	if value, ok := euo.mutation.Message(); ok {
		_spec.SetField(emission.FieldMessage, field.TypeString, value)
	}
	if euo.mutation.MessageCleared() {
		_spec.ClearField(emission.FieldMessage, field.TypeString)
	}
	if value, ok := euo.mutation.Status(); ok {
		_spec.SetField(emission.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := euo.mutation.UserID(); ok {
		_spec.SetField(emission.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := euo.mutation.CreatedAt(); ok {
		_spec.SetField(emission.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(emission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.DeletedAt(); ok {
		_spec.SetField(emission.FieldDeletedAt, field.TypeTime, value)
	}
	if euo.mutation.DeletedAtCleared() {
		_spec.ClearField(emission.FieldDeletedAt, field.TypeTime)
	}
	if euo.mutation.GnreEmissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   emission.GnreEmissionTable,
			Columns: []string{emission.GnreEmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gnreemission.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.GnreEmissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   emission.GnreEmissionTable,
			Columns: []string{emission.GnreEmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gnreemission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Emission{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
