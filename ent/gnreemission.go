// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lucasbonna/contafacil_api/ent/emission"
	"github.com/lucasbonna/contafacil_api/ent/gnreemission"
)

// GnreEmission is the model entity for the GnreEmission schema.
type GnreEmission struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// XML holds the value of the "xml" field.
	XML uuid.UUID `json:"xml,omitempty"`
	// Pdf holds the value of the "pdf" field.
	Pdf uuid.UUID `json:"pdf,omitempty"`
	// ComprovantePdf holds the value of the "comprovante_pdf" field.
	ComprovantePdf uuid.UUID `json:"comprovante_pdf,omitempty"`
	// GuiaAmount holds the value of the "guia_amount" field.
	GuiaAmount float64 `json:"guia_amount,omitempty"`
	// NumeroRecibo holds the value of the "numero_recibo" field.
	NumeroRecibo string `json:"numero_recibo,omitempty"`
	// ChaveNota holds the value of the "chave_nota" field.
	ChaveNota string `json:"chave_nota,omitempty"`
	// CodBarrasGuia holds the value of the "cod_barras_guia" field.
	CodBarrasGuia string `json:"cod_barras_guia,omitempty"`
	// NumNota holds the value of the "num_nota" field.
	NumNota string `json:"num_nota,omitempty"`
	// Destinatario holds the value of the "destinatario" field.
	Destinatario string `json:"destinatario,omitempty"`
	// CpfCnpj holds the value of the "cpf_cnpj" field.
	CpfCnpj string `json:"cpf_cnpj,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GnreEmissionQuery when eager-loading is set.
	Edges                  GnreEmissionEdges `json:"edges"`
	emission_gnre_emission *uuid.UUID
	selectValues           sql.SelectValues
}

// GnreEmissionEdges holds the relations/edges for other nodes in the graph.
type GnreEmissionEdges struct {
	// Emission holds the value of the emission edge.
	Emission *Emission `json:"emission,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EmissionOrErr returns the Emission value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GnreEmissionEdges) EmissionOrErr() (*Emission, error) {
	if e.Emission != nil {
		return e.Emission, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: emission.Label}
	}
	return nil, &NotLoadedError{edge: "emission"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GnreEmission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gnreemission.FieldGuiaAmount:
			values[i] = new(sql.NullFloat64)
		case gnreemission.FieldNumeroRecibo, gnreemission.FieldChaveNota, gnreemission.FieldCodBarrasGuia, gnreemission.FieldNumNota, gnreemission.FieldDestinatario, gnreemission.FieldCpfCnpj:
			values[i] = new(sql.NullString)
		case gnreemission.FieldID, gnreemission.FieldXML, gnreemission.FieldPdf, gnreemission.FieldComprovantePdf:
			values[i] = new(uuid.UUID)
		case gnreemission.ForeignKeys[0]: // emission_gnre_emission
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GnreEmission fields.
func (ge *GnreEmission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gnreemission.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ge.ID = *value
			}
		case gnreemission.FieldXML:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field xml", values[i])
			} else if value != nil {
				ge.XML = *value
			}
		case gnreemission.FieldPdf:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field pdf", values[i])
			} else if value != nil {
				ge.Pdf = *value
			}
		case gnreemission.FieldComprovantePdf:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field comprovante_pdf", values[i])
			} else if value != nil {
				ge.ComprovantePdf = *value
			}
		case gnreemission.FieldGuiaAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field guia_amount", values[i])
			} else if value.Valid {
				ge.GuiaAmount = value.Float64
			}
		case gnreemission.FieldNumeroRecibo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field numero_recibo", values[i])
			} else if value.Valid {
				ge.NumeroRecibo = value.String
			}
		case gnreemission.FieldChaveNota:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chave_nota", values[i])
			} else if value.Valid {
				ge.ChaveNota = value.String
			}
		case gnreemission.FieldCodBarrasGuia:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cod_barras_guia", values[i])
			} else if value.Valid {
				ge.CodBarrasGuia = value.String
			}
		case gnreemission.FieldNumNota:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field num_nota", values[i])
			} else if value.Valid {
				ge.NumNota = value.String
			}
		case gnreemission.FieldDestinatario:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field destinatario", values[i])
			} else if value.Valid {
				ge.Destinatario = value.String
			}
		case gnreemission.FieldCpfCnpj:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cpf_cnpj", values[i])
			} else if value.Valid {
				ge.CpfCnpj = value.String
			}
		case gnreemission.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field emission_gnre_emission", values[i])
			} else if value.Valid {
				ge.emission_gnre_emission = new(uuid.UUID)
				*ge.emission_gnre_emission = *value.S.(*uuid.UUID)
			}
		default:
			ge.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GnreEmission.
// This includes values selected through modifiers, order, etc.
func (ge *GnreEmission) Value(name string) (ent.Value, error) {
	return ge.selectValues.Get(name)
}

// QueryEmission queries the "emission" edge of the GnreEmission entity.
func (ge *GnreEmission) QueryEmission() *EmissionQuery {
	return NewGnreEmissionClient(ge.config).QueryEmission(ge)
}

// Update returns a builder for updating this GnreEmission.
// Note that you need to call GnreEmission.Unwrap() before calling this method if this GnreEmission
// was returned from a transaction, and the transaction was committed or rolled back.
func (ge *GnreEmission) Update() *GnreEmissionUpdateOne {
	return NewGnreEmissionClient(ge.config).UpdateOne(ge)
}

// Unwrap unwraps the GnreEmission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ge *GnreEmission) Unwrap() *GnreEmission {
	_tx, ok := ge.config.driver.(*txDriver)
	if !ok {
		panic("ent: GnreEmission is not a transactional entity")
	}
	ge.config.driver = _tx.drv
	return ge
}

// String implements the fmt.Stringer.
func (ge *GnreEmission) String() string {
	var builder strings.Builder
	builder.WriteString("GnreEmission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ge.ID))
	builder.WriteString("xml=")
	builder.WriteString(fmt.Sprintf("%v", ge.XML))
	builder.WriteString(", ")
	builder.WriteString("pdf=")
	builder.WriteString(fmt.Sprintf("%v", ge.Pdf))
	builder.WriteString(", ")
	builder.WriteString("comprovante_pdf=")
	builder.WriteString(fmt.Sprintf("%v", ge.ComprovantePdf))
	builder.WriteString(", ")
	builder.WriteString("guia_amount=")
	builder.WriteString(fmt.Sprintf("%v", ge.GuiaAmount))
	builder.WriteString(", ")
	builder.WriteString("numero_recibo=")
	builder.WriteString(ge.NumeroRecibo)
	builder.WriteString(", ")
	builder.WriteString("chave_nota=")
	builder.WriteString(ge.ChaveNota)
	builder.WriteString(", ")
	builder.WriteString("cod_barras_guia=")
	builder.WriteString(ge.CodBarrasGuia)
	builder.WriteString(", ")
	builder.WriteString("num_nota=")
	builder.WriteString(ge.NumNota)
	builder.WriteString(", ")
	builder.WriteString("destinatario=")
	builder.WriteString(ge.Destinatario)
	builder.WriteString(", ")
	builder.WriteString("cpf_cnpj=")
	builder.WriteString(ge.CpfCnpj)
	builder.WriteByte(')')
	return builder.String()
}

// GnreEmissions is a parsable slice of GnreEmission.
type GnreEmissions []*GnreEmission
