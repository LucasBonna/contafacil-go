// Code generated by ent, DO NOT EDIT.

package gnreemission

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the gnreemission type in the database.
	Label = "gnre_emission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldXML holds the string denoting the xml field in the database.
	FieldXML = "xml"
	// FieldPdf holds the string denoting the pdf field in the database.
	FieldPdf = "pdf"
	// FieldComprovantePdf holds the string denoting the comprovante_pdf field in the database.
	FieldComprovantePdf = "comprovante_pdf"
	// FieldGuiaAmount holds the string denoting the guia_amount field in the database.
	FieldGuiaAmount = "guia_amount"
	// FieldNumeroRecibo holds the string denoting the numero_recibo field in the database.
	FieldNumeroRecibo = "numero_recibo"
	// FieldChaveNota holds the string denoting the chave_nota field in the database.
	FieldChaveNota = "chave_nota"
	// FieldCodBarrasGuia holds the string denoting the cod_barras_guia field in the database.
	FieldCodBarrasGuia = "cod_barras_guia"
	// FieldNumNota holds the string denoting the num_nota field in the database.
	FieldNumNota = "num_nota"
	// FieldDestinatario holds the string denoting the destinatario field in the database.
	FieldDestinatario = "destinatario"
	// FieldCpfCnpj holds the string denoting the cpf_cnpj field in the database.
	FieldCpfCnpj = "cpf_cnpj"
	// EdgeEmission holds the string denoting the emission edge name in mutations.
	EdgeEmission = "emission"
	// Table holds the table name of the gnreemission in the database.
	Table = "gnre_emission"
	// EmissionTable is the table that holds the emission relation/edge.
	EmissionTable = "gnre_emission"
	// EmissionInverseTable is the table name for the Emission entity.
	// It exists in this package in order to avoid circular dependency with the "emission" package.
	EmissionInverseTable = "emissions"
	// EmissionColumn is the table column denoting the emission relation/edge.
	EmissionColumn = "emission_gnre_emission"
)

// Columns holds all SQL columns for gnreemission fields.
var Columns = []string{
	FieldID,
	FieldXML,
	FieldPdf,
	FieldComprovantePdf,
	FieldGuiaAmount,
	FieldNumeroRecibo,
	FieldChaveNota,
	FieldCodBarrasGuia,
	FieldNumNota,
	FieldDestinatario,
	FieldCpfCnpj,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "gnre_emission"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"emission_gnre_emission",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// GuiaAmountValidator is a validator for the "guia_amount" field. It is called by the builders before save.
	GuiaAmountValidator func(float64) error
)

// OrderOption defines the ordering options for the GnreEmission queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByXML orders the results by the xml field.
func ByXML(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldXML, opts...).ToFunc()
}

// ByPdf orders the results by the pdf field.
func ByPdf(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPdf, opts...).ToFunc()
}

// ByComprovantePdf orders the results by the comprovante_pdf field.
func ByComprovantePdf(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComprovantePdf, opts...).ToFunc()
}

// ByGuiaAmount orders the results by the guia_amount field.
func ByGuiaAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGuiaAmount, opts...).ToFunc()
}

// ByNumeroRecibo orders the results by the numero_recibo field.
func ByNumeroRecibo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumeroRecibo, opts...).ToFunc()
}

// ByChaveNota orders the results by the chave_nota field.
func ByChaveNota(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChaveNota, opts...).ToFunc()
}

// ByCodBarrasGuia orders the results by the cod_barras_guia field.
func ByCodBarrasGuia(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCodBarrasGuia, opts...).ToFunc()
}

// ByNumNota orders the results by the num_nota field.
func ByNumNota(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumNota, opts...).ToFunc()
}

// ByDestinatario orders the results by the destinatario field.
func ByDestinatario(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDestinatario, opts...).ToFunc()
}

// ByCpfCnpj orders the results by the cpf_cnpj field.
func ByCpfCnpj(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCpfCnpj, opts...).ToFunc()
}

// ByEmissionField orders the results by emission field.
func ByEmissionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmissionStep(), sql.OrderByField(field, opts...))
	}
}
func newEmissionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmissionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, EmissionTable, EmissionColumn),
	)
}
