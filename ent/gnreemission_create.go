// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lucasbonna/contafacil_api/ent/emission"
	"github.com/lucasbonna/contafacil_api/ent/gnreemission"
)

// GnreEmissionCreate is the builder for creating a GnreEmission entity.
type GnreEmissionCreate struct {
	config
	mutation *GnreEmissionMutation
	hooks    []Hook
}

// SetXML sets the "xml" field.
func (gec *GnreEmissionCreate) SetXML(u uuid.UUID) *GnreEmissionCreate {
	gec.mutation.SetXML(u)
	return gec
}

// SetPdf sets the "pdf" field.
func (gec *GnreEmissionCreate) SetPdf(u uuid.UUID) *GnreEmissionCreate {
	gec.mutation.SetPdf(u)
	return gec
}

// SetNillablePdf sets the "pdf" field if the given value is not nil.
func (gec *GnreEmissionCreate) SetNillablePdf(u *uuid.UUID) *GnreEmissionCreate {
	if u != nil {
		gec.SetPdf(*u)
	}
	return gec
}

// SetComprovantePdf sets the "comprovante_pdf" field.
func (gec *GnreEmissionCreate) SetComprovantePdf(u uuid.UUID) *GnreEmissionCreate {
	gec.mutation.SetComprovantePdf(u)
	return gec
}

// SetNillableComprovantePdf sets the "comprovante_pdf" field if the given value is not nil.
func (gec *GnreEmissionCreate) SetNillableComprovantePdf(u *uuid.UUID) *GnreEmissionCreate {
	if u != nil {
		gec.SetComprovantePdf(*u)
	}
	return gec
}

// SetGuiaAmount sets the "guia_amount" field.
func (gec *GnreEmissionCreate) SetGuiaAmount(f float64) *GnreEmissionCreate {
	gec.mutation.SetGuiaAmount(f)
	return gec
}

// SetNumeroRecibo sets the "numero_recibo" field.
func (gec *GnreEmissionCreate) SetNumeroRecibo(s string) *GnreEmissionCreate {
	gec.mutation.SetNumeroRecibo(s)
	return gec
}

// SetNillableNumeroRecibo sets the "numero_recibo" field if the given value is not nil.
func (gec *GnreEmissionCreate) SetNillableNumeroRecibo(s *string) *GnreEmissionCreate {
	if s != nil {
		gec.SetNumeroRecibo(*s)
	}
	return gec
}

// SetChaveNota sets the "chave_nota" field.
func (gec *GnreEmissionCreate) SetChaveNota(s string) *GnreEmissionCreate {
	gec.mutation.SetChaveNota(s)
	return gec
}

// SetCodBarrasGuia sets the "cod_barras_guia" field.
func (gec *GnreEmissionCreate) SetCodBarrasGuia(s string) *GnreEmissionCreate {
	gec.mutation.SetCodBarrasGuia(s)
	return gec
}

// SetNillableCodBarrasGuia sets the "cod_barras_guia" field if the given value is not nil.
func (gec *GnreEmissionCreate) SetNillableCodBarrasGuia(s *string) *GnreEmissionCreate {
	if s != nil {
		gec.SetCodBarrasGuia(*s)
	}
	return gec
}

// SetNumNota sets the "num_nota" field.
func (gec *GnreEmissionCreate) SetNumNota(s string) *GnreEmissionCreate {
	gec.mutation.SetNumNota(s)
	return gec
}

// SetDestinatario sets the "destinatario" field.
func (gec *GnreEmissionCreate) SetDestinatario(s string) *GnreEmissionCreate {
	gec.mutation.SetDestinatario(s)
	return gec
}

// SetCpfCnpj sets the "cpf_cnpj" field.
func (gec *GnreEmissionCreate) SetCpfCnpj(s string) *GnreEmissionCreate {
	gec.mutation.SetCpfCnpj(s)
	return gec
}

// SetID sets the "id" field.
func (gec *GnreEmissionCreate) SetID(u uuid.UUID) *GnreEmissionCreate {
	gec.mutation.SetID(u)
	return gec
}

// SetEmissionID sets the "emission" edge to the Emission entity by ID.
func (gec *GnreEmissionCreate) SetEmissionID(id uuid.UUID) *GnreEmissionCreate {
	gec.mutation.SetEmissionID(id)
	return gec
}

// SetEmission sets the "emission" edge to the Emission entity.
func (gec *GnreEmissionCreate) SetEmission(e *Emission) *GnreEmissionCreate {
	return gec.SetEmissionID(e.ID)
}

// Mutation returns the GnreEmissionMutation object of the builder.
func (gec *GnreEmissionCreate) Mutation() *GnreEmissionMutation {
	return gec.mutation
}

// Save creates the GnreEmission in the database.
func (gec *GnreEmissionCreate) Save(ctx context.Context) (*GnreEmission, error) {
	return withHooks(ctx, gec.sqlSave, gec.mutation, gec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gec *GnreEmissionCreate) SaveX(ctx context.Context) *GnreEmission {
	v, err := gec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gec *GnreEmissionCreate) Exec(ctx context.Context) error {
	_, err := gec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gec *GnreEmissionCreate) ExecX(ctx context.Context) {
	if err := gec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gec *GnreEmissionCreate) check() error {
	if _, ok := gec.mutation.XML(); !ok {
		return &ValidationError{Name: "xml", err: errors.New(`ent: missing required field "GnreEmission.xml"`)}
	}
	if _, ok := gec.mutation.GuiaAmount(); !ok {
		return &ValidationError{Name: "guia_amount", err: errors.New(`ent: missing required field "GnreEmission.guia_amount"`)}
	}
	if v, ok := gec.mutation.GuiaAmount(); ok {
		if err := gnreemission.GuiaAmountValidator(v); err != nil {
			return &ValidationError{Name: "guia_amount", err: fmt.Errorf(`ent: validator failed for field "GnreEmission.guia_amount": %w`, err)}
		}
	}
	if _, ok := gec.mutation.ChaveNota(); !ok {
		return &ValidationError{Name: "chave_nota", err: errors.New(`ent: missing required field "GnreEmission.chave_nota"`)}
	}
	if _, ok := gec.mutation.NumNota(); !ok {
		return &ValidationError{Name: "num_nota", err: errors.New(`ent: missing required field "GnreEmission.num_nota"`)}
	}
	if _, ok := gec.mutation.Destinatario(); !ok {
		return &ValidationError{Name: "destinatario", err: errors.New(`ent: missing required field "GnreEmission.destinatario"`)}
	}
	if _, ok := gec.mutation.CpfCnpj(); !ok {
		return &ValidationError{Name: "cpf_cnpj", err: errors.New(`ent: missing required field "GnreEmission.cpf_cnpj"`)}
	}
	if len(gec.mutation.EmissionIDs()) == 0 {
		return &ValidationError{Name: "emission", err: errors.New(`ent: missing required edge "GnreEmission.emission"`)}
	}
	return nil
}

func (gec *GnreEmissionCreate) sqlSave(ctx context.Context) (*GnreEmission, error) {
	if err := gec.check(); err != nil {
		return nil, err
	}
	_node, _spec := gec.createSpec()
	if err := sqlgraph.CreateNode(ctx, gec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	gec.mutation.id = &_node.ID
	gec.mutation.done = true
	return _node, nil
}

func (gec *GnreEmissionCreate) createSpec() (*GnreEmission, *sqlgraph.CreateSpec) {
	var (
		_node = &GnreEmission{config: gec.config}
		_spec = sqlgraph.NewCreateSpec(gnreemission.Table, sqlgraph.NewFieldSpec(gnreemission.FieldID, field.TypeUUID))
	)
	if id, ok := gec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := gec.mutation.XML(); ok {
		_spec.SetField(gnreemission.FieldXML, field.TypeUUID, value)
		_node.XML = value
	}
	if value, ok := gec.mutation.Pdf(); ok {
		_spec.SetField(gnreemission.FieldPdf, field.TypeUUID, value)
		_node.Pdf = value
	}
	if value, ok := gec.mutation.ComprovantePdf(); ok {
		_spec.SetField(gnreemission.FieldComprovantePdf, field.TypeUUID, value)
		_node.ComprovantePdf = value
	}
	if value, ok := gec.mutation.GuiaAmount(); ok {
		_spec.SetField(gnreemission.FieldGuiaAmount, field.TypeFloat64, value)
		_node.GuiaAmount = value
	}
	if value, ok := gec.mutation.NumeroRecibo(); ok {
		_spec.SetField(gnreemission.FieldNumeroRecibo, field.TypeString, value)
		_node.NumeroRecibo = value
	}
	if value, ok := gec.mutation.ChaveNota(); ok {
		_spec.SetField(gnreemission.FieldChaveNota, field.TypeString, value)
		_node.ChaveNota = value
	}
	if value, ok := gec.mutation.CodBarrasGuia(); ok {
		_spec.SetField(gnreemission.FieldCodBarrasGuia, field.TypeString, value)
		_node.CodBarrasGuia = value
	}
	if value, ok := gec.mutation.NumNota(); ok {
		_spec.SetField(gnreemission.FieldNumNota, field.TypeString, value)
		_node.NumNota = value
	}
	if value, ok := gec.mutation.Destinatario(); ok {
		_spec.SetField(gnreemission.FieldDestinatario, field.TypeString, value)
		_node.Destinatario = value
	}
	if value, ok := gec.mutation.CpfCnpj(); ok {
		_spec.SetField(gnreemission.FieldCpfCnpj, field.TypeString, value)
		_node.CpfCnpj = value
	}
	if nodes := gec.mutation.EmissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   gnreemission.EmissionTable,
			Columns: []string{gnreemission.EmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.emission_gnre_emission = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GnreEmissionCreateBulk is the builder for creating many GnreEmission entities in bulk.
type GnreEmissionCreateBulk struct {
	config
	err      error
	builders []*GnreEmissionCreate
}

// Save creates the GnreEmission entities in the database.
func (gecb *GnreEmissionCreateBulk) Save(ctx context.Context) ([]*GnreEmission, error) {
	if gecb.err != nil {
		return nil, gecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gecb.builders))
	nodes := make([]*GnreEmission, len(gecb.builders))
	mutators := make([]Mutator, len(gecb.builders))
	for i := range gecb.builders {
		func(i int, root context.Context) {
			builder := gecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GnreEmissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gecb *GnreEmissionCreateBulk) SaveX(ctx context.Context) []*GnreEmission {
	v, err := gecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gecb *GnreEmissionCreateBulk) Exec(ctx context.Context) error {
	_, err := gecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gecb *GnreEmissionCreateBulk) ExecX(ctx context.Context) {
	if err := gecb.Exec(ctx); err != nil {
		panic(err)
	}
}
