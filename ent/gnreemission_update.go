// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lucasbonna/contafacil_api/ent/emission"
	"github.com/lucasbonna/contafacil_api/ent/gnreemission"
	"github.com/lucasbonna/contafacil_api/ent/predicate"
)

// GnreEmissionUpdate is the builder for updating GnreEmission entities.
type GnreEmissionUpdate struct {
	config
	hooks    []Hook
	mutation *GnreEmissionMutation
}

// Where appends a list predicates to the GnreEmissionUpdate builder.
func (geu *GnreEmissionUpdate) Where(ps ...predicate.GnreEmission) *GnreEmissionUpdate {
	geu.mutation.Where(ps...)
	return geu
}

// SetXML sets the "xml" field.
func (geu *GnreEmissionUpdate) SetXML(u uuid.UUID) *GnreEmissionUpdate {
	geu.mutation.SetXML(u)
	return geu
}

// SetNillableXML sets the "xml" field if the given value is not nil.
func (geu *GnreEmissionUpdate) SetNillableXML(u *uuid.UUID) *GnreEmissionUpdate {
	if u != nil {
		geu.SetXML(*u)
	}
	return geu
}

// SetPdf sets the "pdf" field.
func (geu *GnreEmissionUpdate) SetPdf(u uuid.UUID) *GnreEmissionUpdate {
	geu.mutation.SetPdf(u)
	return geu
}

// SetNillablePdf sets the "pdf" field if the given value is not nil.
func (geu *GnreEmissionUpdate) SetNillablePdf(u *uuid.UUID) *GnreEmissionUpdate {
	if u != nil {
		geu.SetPdf(*u)
	}
	return geu
}

// ClearPdf clears the value of the "pdf" field.
func (geu *GnreEmissionUpdate) ClearPdf() *GnreEmissionUpdate {
	geu.mutation.ClearPdf()
	return geu
}

// SetComprovantePdf sets the "comprovante_pdf" field.
func (geu *GnreEmissionUpdate) SetComprovantePdf(u uuid.UUID) *GnreEmissionUpdate {
	geu.mutation.SetComprovantePdf(u)
	return geu
}

// SetNillableComprovantePdf sets the "comprovante_pdf" field if the given value is not nil.
func (geu *GnreEmissionUpdate) SetNillableComprovantePdf(u *uuid.UUID) *GnreEmissionUpdate {
	if u != nil {
		geu.SetComprovantePdf(*u)
	}
	return geu
}

// ClearComprovantePdf clears the value of the "comprovante_pdf" field.
func (geu *GnreEmissionUpdate) ClearComprovantePdf() *GnreEmissionUpdate {
	geu.mutation.ClearComprovantePdf()
	return geu
}

// SetGuiaAmount sets the "guia_amount" field.
func (geu *GnreEmissionUpdate) SetGuiaAmount(f float64) *GnreEmissionUpdate {
	geu.mutation.ResetGuiaAmount()
	geu.mutation.SetGuiaAmount(f)
	return geu
}

// SetNillableGuiaAmount sets the "guia_amount" field if the given value is not nil.
func (geu *GnreEmissionUpdate) SetNillableGuiaAmount(f *float64) *GnreEmissionUpdate {
	if f != nil {
		geu.SetGuiaAmount(*f)
	}
	return geu
}

// AddGuiaAmount adds f to the "guia_amount" field.
func (geu *GnreEmissionUpdate) AddGuiaAmount(f float64) *GnreEmissionUpdate {
	geu.mutation.AddGuiaAmount(f)
	return geu
}

// SetNumeroRecibo sets the "numero_recibo" field.
func (geu *GnreEmissionUpdate) SetNumeroRecibo(s string) *GnreEmissionUpdate {
	geu.mutation.SetNumeroRecibo(s)
	return geu
}

// SetNillableNumeroRecibo sets the "numero_recibo" field if the given value is not nil.
func (geu *GnreEmissionUpdate) SetNillableNumeroRecibo(s *string) *GnreEmissionUpdate {
	if s != nil {
		geu.SetNumeroRecibo(*s)
	}
	return geu
}

// ClearNumeroRecibo clears the value of the "numero_recibo" field.
func (geu *GnreEmissionUpdate) ClearNumeroRecibo() *GnreEmissionUpdate {
	geu.mutation.ClearNumeroRecibo()
	return geu
}

// SetChaveNota sets the "chave_nota" field.
func (geu *GnreEmissionUpdate) SetChaveNota(s string) *GnreEmissionUpdate {
	geu.mutation.SetChaveNota(s)
	return geu
}

// SetNillableChaveNota sets the "chave_nota" field if the given value is not nil.
func (geu *GnreEmissionUpdate) SetNillableChaveNota(s *string) *GnreEmissionUpdate {
	if s != nil {
		geu.SetChaveNota(*s)
	}
	return geu
}

// SetCodBarrasGuia sets the "cod_barras_guia" field.
func (geu *GnreEmissionUpdate) SetCodBarrasGuia(s string) *GnreEmissionUpdate {
	geu.mutation.SetCodBarrasGuia(s)
	return geu
}

// SetNillableCodBarrasGuia sets the "cod_barras_guia" field if the given value is not nil.
func (geu *GnreEmissionUpdate) SetNillableCodBarrasGuia(s *string) *GnreEmissionUpdate {
	if s != nil {
		geu.SetCodBarrasGuia(*s)
	}
	return geu
}

// ClearCodBarrasGuia clears the value of the "cod_barras_guia" field.
func (geu *GnreEmissionUpdate) ClearCodBarrasGuia() *GnreEmissionUpdate {
	geu.mutation.ClearCodBarrasGuia()
	return geu
}

// SetNumNota sets the "num_nota" field.
func (geu *GnreEmissionUpdate) SetNumNota(s string) *GnreEmissionUpdate {
	geu.mutation.SetNumNota(s)
	return geu
}

// SetNillableNumNota sets the "num_nota" field if the given value is not nil.
func (geu *GnreEmissionUpdate) SetNillableNumNota(s *string) *GnreEmissionUpdate {
	if s != nil {
		geu.SetNumNota(*s)
	}
	return geu
}

// SetDestinatario sets the "destinatario" field.
func (geu *GnreEmissionUpdate) SetDestinatario(s string) *GnreEmissionUpdate {
	geu.mutation.SetDestinatario(s)
	return geu
}

// SetNillableDestinatario sets the "destinatario" field if the given value is not nil.
func (geu *GnreEmissionUpdate) SetNillableDestinatario(s *string) *GnreEmissionUpdate {
	if s != nil {
		geu.SetDestinatario(*s)
	}
	return geu
}

// SetCpfCnpj sets the "cpf_cnpj" field.
func (geu *GnreEmissionUpdate) SetCpfCnpj(s string) *GnreEmissionUpdate {
	geu.mutation.SetCpfCnpj(s)
	return geu
}

// SetNillableCpfCnpj sets the "cpf_cnpj" field if the given value is not nil.
func (geu *GnreEmissionUpdate) SetNillableCpfCnpj(s *string) *GnreEmissionUpdate {
	if s != nil {
		geu.SetCpfCnpj(*s)
	}
	return geu
}

// SetEmissionID sets the "emission" edge to the Emission entity by ID.
func (geu *GnreEmissionUpdate) SetEmissionID(id uuid.UUID) *GnreEmissionUpdate {
	geu.mutation.SetEmissionID(id)
	return geu
}

// SetEmission sets the "emission" edge to the Emission entity.
func (geu *GnreEmissionUpdate) SetEmission(e *Emission) *GnreEmissionUpdate {
	return geu.SetEmissionID(e.ID)
}

// Mutation returns the GnreEmissionMutation object of the builder.
func (geu *GnreEmissionUpdate) Mutation() *GnreEmissionMutation {
	return geu.mutation
}

// ClearEmission clears the "emission" edge to the Emission entity.
func (geu *GnreEmissionUpdate) ClearEmission() *GnreEmissionUpdate {
	geu.mutation.ClearEmission()
	return geu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (geu *GnreEmissionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, geu.sqlSave, geu.mutation, geu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (geu *GnreEmissionUpdate) SaveX(ctx context.Context) int {
	affected, err := geu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (geu *GnreEmissionUpdate) Exec(ctx context.Context) error {
	_, err := geu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (geu *GnreEmissionUpdate) ExecX(ctx context.Context) {
	if err := geu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (geu *GnreEmissionUpdate) check() error {
	if v, ok := geu.mutation.GuiaAmount(); ok {
		if err := gnreemission.GuiaAmountValidator(v); err != nil {
			return &ValidationError{Name: "guia_amount", err: fmt.Errorf(`ent: validator failed for field "GnreEmission.guia_amount": %w`, err)}
		}
	}
	if geu.mutation.EmissionCleared() && len(geu.mutation.EmissionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "GnreEmission.emission"`)
	}
	return nil
}

func (geu *GnreEmissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := geu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(gnreemission.Table, gnreemission.Columns, sqlgraph.NewFieldSpec(gnreemission.FieldID, field.TypeUUID))
	if ps := geu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := geu.mutation.XML(); ok {
		_spec.SetField(gnreemission.FieldXML, field.TypeUUID, value)
	}
	if value, ok := geu.mutation.Pdf(); ok {
		_spec.SetField(gnreemission.FieldPdf, field.TypeUUID, value)
	}
	if geu.mutation.PdfCleared() {
		_spec.ClearField(gnreemission.FieldPdf, field.TypeUUID)
	}
	if value, ok := geu.mutation.ComprovantePdf(); ok {
		_spec.SetField(gnreemission.FieldComprovantePdf, field.TypeUUID, value)
	}
	if geu.mutation.ComprovantePdfCleared() {
		_spec.ClearField(gnreemission.FieldComprovantePdf, field.TypeUUID)
	}
	if value, ok := geu.mutation.GuiaAmount(); ok {
		_spec.SetField(gnreemission.FieldGuiaAmount, field.TypeFloat64, value)
	}
	if value, ok := geu.mutation.AddedGuiaAmount(); ok {
		_spec.AddField(gnreemission.FieldGuiaAmount, field.TypeFloat64, value)
	}
	if value, ok := geu.mutation.NumeroRecibo(); ok {
		_spec.SetField(gnreemission.FieldNumeroRecibo, field.TypeString, value)
	}
	if geu.mutation.NumeroReciboCleared() {
		_spec.ClearField(gnreemission.FieldNumeroRecibo, field.TypeString)
	}
	if value, ok := geu.mutation.ChaveNota(); ok {
		_spec.SetField(gnreemission.FieldChaveNota, field.TypeString, value)
	}
	if value, ok := geu.mutation.CodBarrasGuia(); ok {
		_spec.SetField(gnreemission.FieldCodBarrasGuia, field.TypeString, value)
	}
	if geu.mutation.CodBarrasGuiaCleared() {
		_spec.ClearField(gnreemission.FieldCodBarrasGuia, field.TypeString)
	}
	if value, ok := geu.mutation.NumNota(); ok {
		_spec.SetField(gnreemission.FieldNumNota, field.TypeString, value)
	}
	if value, ok := geu.mutation.Destinatario(); ok {
		_spec.SetField(gnreemission.FieldDestinatario, field.TypeString, value)
	}
	if value, ok := geu.mutation.CpfCnpj(); ok {
		_spec.SetField(gnreemission.FieldCpfCnpj, field.TypeString, value)
	}
	if geu.mutation.EmissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   gnreemission.EmissionTable,
			Columns: []string{gnreemission.EmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emission.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := geu.mutation.EmissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   gnreemission.EmissionTable,
			Columns: []string{gnreemission.EmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, geu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gnreemission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	geu.mutation.done = true
	return n, nil
}

// GnreEmissionUpdateOne is the builder for updating a single GnreEmission entity.
type GnreEmissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GnreEmissionMutation
}

// SetXML sets the "xml" field.
func (geuo *GnreEmissionUpdateOne) SetXML(u uuid.UUID) *GnreEmissionUpdateOne {
	geuo.mutation.SetXML(u)
	return geuo
}

// SetNillableXML sets the "xml" field if the given value is not nil.
func (geuo *GnreEmissionUpdateOne) SetNillableXML(u *uuid.UUID) *GnreEmissionUpdateOne {
	if u != nil {
		geuo.SetXML(*u)
	}
	return geuo
}

// SetPdf sets the "pdf" field.
func (geuo *GnreEmissionUpdateOne) SetPdf(u uuid.UUID) *GnreEmissionUpdateOne {
	geuo.mutation.SetPdf(u)
	return geuo
}

// SetNillablePdf sets the "pdf" field if the given value is not nil.
func (geuo *GnreEmissionUpdateOne) SetNillablePdf(u *uuid.UUID) *GnreEmissionUpdateOne {
	if u != nil {
		geuo.SetPdf(*u)
	}
	return geuo
}

// ClearPdf clears the value of the "pdf" field.
func (geuo *GnreEmissionUpdateOne) ClearPdf() *GnreEmissionUpdateOne {
	geuo.mutation.ClearPdf()
	return geuo
}

// SetComprovantePdf sets the "comprovante_pdf" field.
func (geuo *GnreEmissionUpdateOne) SetComprovantePdf(u uuid.UUID) *GnreEmissionUpdateOne {
	geuo.mutation.SetComprovantePdf(u)
	return geuo
}

// SetNillableComprovantePdf sets the "comprovante_pdf" field if the given value is not nil.
func (geuo *GnreEmissionUpdateOne) SetNillableComprovantePdf(u *uuid.UUID) *GnreEmissionUpdateOne {
	if u != nil {
		geuo.SetComprovantePdf(*u)
	}
	return geuo
}

// ClearComprovantePdf clears the value of the "comprovante_pdf" field.
func (geuo *GnreEmissionUpdateOne) ClearComprovantePdf() *GnreEmissionUpdateOne {
	geuo.mutation.ClearComprovantePdf()
	return geuo
}

// SetGuiaAmount sets the "guia_amount" field.
func (geuo *GnreEmissionUpdateOne) SetGuiaAmount(f float64) *GnreEmissionUpdateOne {
	geuo.mutation.ResetGuiaAmount()
	geuo.mutation.SetGuiaAmount(f)
	return geuo
}

// SetNillableGuiaAmount sets the "guia_amount" field if the given value is not nil.
func (geuo *GnreEmissionUpdateOne) SetNillableGuiaAmount(f *float64) *GnreEmissionUpdateOne {
	if f != nil {
		geuo.SetGuiaAmount(*f)
	}
	return geuo
}

// AddGuiaAmount adds f to the "guia_amount" field.
func (geuo *GnreEmissionUpdateOne) AddGuiaAmount(f float64) *GnreEmissionUpdateOne {
	geuo.mutation.AddGuiaAmount(f)
	return geuo
}

// SetNumeroRecibo sets the "numero_recibo" field.
func (geuo *GnreEmissionUpdateOne) SetNumeroRecibo(s string) *GnreEmissionUpdateOne {
	geuo.mutation.SetNumeroRecibo(s)
	return geuo
}

// SetNillableNumeroRecibo sets the "numero_recibo" field if the given value is not nil.
func (geuo *GnreEmissionUpdateOne) SetNillableNumeroRecibo(s *string) *GnreEmissionUpdateOne {
	if s != nil {
		geuo.SetNumeroRecibo(*s)
	}
	return geuo
}

// ClearNumeroRecibo clears the value of the "numero_recibo" field.
func (geuo *GnreEmissionUpdateOne) ClearNumeroRecibo() *GnreEmissionUpdateOne {
	geuo.mutation.ClearNumeroRecibo()
	return geuo
}

// SetChaveNota sets the "chave_nota" field.
func (geuo *GnreEmissionUpdateOne) SetChaveNota(s string) *GnreEmissionUpdateOne {
	geuo.mutation.SetChaveNota(s)
	return geuo
}

// SetNillableChaveNota sets the "chave_nota" field if the given value is not nil.
func (geuo *GnreEmissionUpdateOne) SetNillableChaveNota(s *string) *GnreEmissionUpdateOne {
	if s != nil {
		geuo.SetChaveNota(*s)
	}
	return geuo
}

// SetCodBarrasGuia sets the "cod_barras_guia" field.
func (geuo *GnreEmissionUpdateOne) SetCodBarrasGuia(s string) *GnreEmissionUpdateOne {
	geuo.mutation.SetCodBarrasGuia(s)
	return geuo
}

// SetNillableCodBarrasGuia sets the "cod_barras_guia" field if the given value is not nil.
func (geuo *GnreEmissionUpdateOne) SetNillableCodBarrasGuia(s *string) *GnreEmissionUpdateOne {
	if s != nil {
		geuo.SetCodBarrasGuia(*s)
	}
	return geuo
}

// ClearCodBarrasGuia clears the value of the "cod_barras_guia" field.
func (geuo *GnreEmissionUpdateOne) ClearCodBarrasGuia() *GnreEmissionUpdateOne {
	geuo.mutation.ClearCodBarrasGuia()
	return geuo
}

// SetNumNota sets the "num_nota" field.
func (geuo *GnreEmissionUpdateOne) SetNumNota(s string) *GnreEmissionUpdateOne {
	geuo.mutation.SetNumNota(s)
	return geuo
}

// SetNillableNumNota sets the "num_nota" field if the given value is not nil.
func (geuo *GnreEmissionUpdateOne) SetNillableNumNota(s *string) *GnreEmissionUpdateOne {
	if s != nil {
		geuo.SetNumNota(*s)
	}
	return geuo
}

// SetDestinatario sets the "destinatario" field.
func (geuo *GnreEmissionUpdateOne) SetDestinatario(s string) *GnreEmissionUpdateOne {
	geuo.mutation.SetDestinatario(s)
	return geuo
}

// SetNillableDestinatario sets the "destinatario" field if the given value is not nil.
func (geuo *GnreEmissionUpdateOne) SetNillableDestinatario(s *string) *GnreEmissionUpdateOne {
	if s != nil {
		geuo.SetDestinatario(*s)
	}
	return geuo
}

// SetCpfCnpj sets the "cpf_cnpj" field.
func (geuo *GnreEmissionUpdateOne) SetCpfCnpj(s string) *GnreEmissionUpdateOne {
	geuo.mutation.SetCpfCnpj(s)
	return geuo
}

// SetNillableCpfCnpj sets the "cpf_cnpj" field if the given value is not nil.
func (geuo *GnreEmissionUpdateOne) SetNillableCpfCnpj(s *string) *GnreEmissionUpdateOne {
	if s != nil {
		geuo.SetCpfCnpj(*s)
	}
	return geuo
}

// SetEmissionID sets the "emission" edge to the Emission entity by ID.
func (geuo *GnreEmissionUpdateOne) SetEmissionID(id uuid.UUID) *GnreEmissionUpdateOne {
	geuo.mutation.SetEmissionID(id)
	return geuo
}

// SetEmission sets the "emission" edge to the Emission entity.
func (geuo *GnreEmissionUpdateOne) SetEmission(e *Emission) *GnreEmissionUpdateOne {
	return geuo.SetEmissionID(e.ID)
}

// Mutation returns the GnreEmissionMutation object of the builder.
func (geuo *GnreEmissionUpdateOne) Mutation() *GnreEmissionMutation {
	return geuo.mutation
}

// ClearEmission clears the "emission" edge to the Emission entity.
func (geuo *GnreEmissionUpdateOne) ClearEmission() *GnreEmissionUpdateOne {
	geuo.mutation.ClearEmission()
	return geuo
}

// Where appends a list predicates to the GnreEmissionUpdate builder.
func (geuo *GnreEmissionUpdateOne) Where(ps ...predicate.GnreEmission) *GnreEmissionUpdateOne {
	geuo.mutation.Where(ps...)
	return geuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (geuo *GnreEmissionUpdateOne) Select(field string, fields ...string) *GnreEmissionUpdateOne {
	geuo.fields = append([]string{field}, fields...)
	return geuo
}

// Save executes the query and returns the updated GnreEmission entity.
func (geuo *GnreEmissionUpdateOne) Save(ctx context.Context) (*GnreEmission, error) {
	return withHooks(ctx, geuo.sqlSave, geuo.mutation, geuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (geuo *GnreEmissionUpdateOne) SaveX(ctx context.Context) *GnreEmission {
	node, err := geuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (geuo *GnreEmissionUpdateOne) Exec(ctx context.Context) error {
	_, err := geuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (geuo *GnreEmissionUpdateOne) ExecX(ctx context.Context) {
	if err := geuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (geuo *GnreEmissionUpdateOne) check() error {
	if v, ok := geuo.mutation.GuiaAmount(); ok {
		if err := gnreemission.GuiaAmountValidator(v); err != nil {
			return &ValidationError{Name: "guia_amount", err: fmt.Errorf(`ent: validator failed for field "GnreEmission.guia_amount": %w`, err)}
		}
	}
	if geuo.mutation.EmissionCleared() && len(geuo.mutation.EmissionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "GnreEmission.emission"`)
	}
	return nil
}

func (geuo *GnreEmissionUpdateOne) sqlSave(ctx context.Context) (_node *GnreEmission, err error) {
	if err := geuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(gnreemission.Table, gnreemission.Columns, sqlgraph.NewFieldSpec(gnreemission.FieldID, field.TypeUUID))
	id, ok := geuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GnreEmission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := geuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gnreemission.FieldID)
		for _, f := range fields {
			if !gnreemission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != gnreemission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := geuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := geuo.mutation.XML(); ok {
		_spec.SetField(gnreemission.FieldXML, field.TypeUUID, value)
	}
	if value, ok := geuo.mutation.Pdf(); ok {
		_spec.SetField(gnreemission.FieldPdf, field.TypeUUID, value)
	}
	if geuo.mutation.PdfCleared() {
		_spec.ClearField(gnreemission.FieldPdf, field.TypeUUID)
	}
	if value, ok := geuo.mutation.ComprovantePdf(); ok {
		_spec.SetField(gnreemission.FieldComprovantePdf, field.TypeUUID, value)
	}
	if geuo.mutation.ComprovantePdfCleared() {
		_spec.ClearField(gnreemission.FieldComprovantePdf, field.TypeUUID)
	}
	if value, ok := geuo.mutation.GuiaAmount(); ok {
		_spec.SetField(gnreemission.FieldGuiaAmount, field.TypeFloat64, value)
	}
	if value, ok := geuo.mutation.AddedGuiaAmount(); ok {
		_spec.AddField(gnreemission.FieldGuiaAmount, field.TypeFloat64, value)
	}
	if value, ok := geuo.mutation.NumeroRecibo(); ok {
		_spec.SetField(gnreemission.FieldNumeroRecibo, field.TypeString, value)
	}
	if geuo.mutation.NumeroReciboCleared() {
		_spec.ClearField(gnreemission.FieldNumeroRecibo, field.TypeString)
	}
	if value, ok := geuo.mutation.ChaveNota(); ok {
		_spec.SetField(gnreemission.FieldChaveNota, field.TypeString, value)
	}
	if value, ok := geuo.mutation.CodBarrasGuia(); ok {
		_spec.SetField(gnreemission.FieldCodBarrasGuia, field.TypeString, value)
	}
	if geuo.mutation.CodBarrasGuiaCleared() {
		_spec.ClearField(gnreemission.FieldCodBarrasGuia, field.TypeString)
	}
	if value, ok := geuo.mutation.NumNota(); ok {
		_spec.SetField(gnreemission.FieldNumNota, field.TypeString, value)
	}
	if value, ok := geuo.mutation.Destinatario(); ok {
		_spec.SetField(gnreemission.FieldDestinatario, field.TypeString, value)
	}
	if value, ok := geuo.mutation.CpfCnpj(); ok {
		_spec.SetField(gnreemission.FieldCpfCnpj, field.TypeString, value)
	}
	if geuo.mutation.EmissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   gnreemission.EmissionTable,
			Columns: []string{gnreemission.EmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emission.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := geuo.mutation.EmissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   gnreemission.EmissionTable,
			Columns: []string{gnreemission.EmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GnreEmission{config: geuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, geuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gnreemission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	geuo.mutation.done = true
	return _node, nil
}
