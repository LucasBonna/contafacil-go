// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccessLogsColumns holds the columns for the "access_logs" table.
	AccessLogsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "ip", Type: field.TypeString},
		{Name: "method", Type: field.TypeString},
		{Name: "endpoint", Type: field.TypeString},
		{Name: "request_body", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "request_headers", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "request_params", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "request_query", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "response_body", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "response_headers", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "response_time", Type: field.TypeString, Nullable: true, Size: 50},
		{Name: "status_code", Type: field.TypeInt, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// AccessLogsTable holds the schema information for the "access_logs" table.
	AccessLogsTable = &schema.Table{
		Name:       "access_logs",
		Columns:    AccessLogsColumns,
		PrimaryKey: []*schema.Column{AccessLogsColumns[0]},
	}
	// ClientsColumns holds the columns for the "clients" table.
	ClientsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString, Size: 255},
		{Name: "cnpj", Type: field.TypeString, Unique: true, Size: 20},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"ADMIN", "USER"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
	}
	// ClientsTable holds the schema information for the "clients" table.
	ClientsTable = &schema.Table{
		Name:       "clients",
		Columns:    ClientsColumns,
		PrimaryKey: []*schema.Column{ClientsColumns[0]},
	}
	// EmissionsColumns holds the columns for the "emissions" table.
	EmissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "emission_type", Type: field.TypeEnum, Enums: []string{"GNRE"}},
		{Name: "client_id", Type: field.TypeUUID},
		{Name: "message", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"PROCESSING", "FAILED", "FINISHED", "EXCEPTION"}},
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
	}
	// EmissionsTable holds the schema information for the "emissions" table.
	EmissionsTable = &schema.Table{
		Name:       "emissions",
		Columns:    EmissionsColumns,
		PrimaryKey: []*schema.Column{EmissionsColumns[0]},
	}
	// FilesColumns holds the columns for the "files" table.
	FilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "extension", Type: field.TypeString, Size: 4},
		{Name: "content_type", Type: field.TypeString, Size: 100},
		{Name: "file_path", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
	}
	// FilesTable holds the schema information for the "files" table.
	FilesTable = &schema.Table{
		Name:       "files",
		Columns:    FilesColumns,
		PrimaryKey: []*schema.Column{FilesColumns[0]},
	}
	// GnreEmissionColumns holds the columns for the "gnre_emission" table.
	GnreEmissionColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "xml", Type: field.TypeUUID},
		{Name: "pdf", Type: field.TypeUUID, Nullable: true},
		{Name: "comprovante_pdf", Type: field.TypeUUID, Nullable: true},
		{Name: "guia_amount", Type: field.TypeFloat64},
		{Name: "numero_recibo", Type: field.TypeString, Nullable: true},
		{Name: "chave_nota", Type: field.TypeString},
		{Name: "cod_barras_guia", Type: field.TypeString, Nullable: true},
		{Name: "num_nota", Type: field.TypeString},
		{Name: "destinatario", Type: field.TypeString},
		{Name: "cpf_cnpj", Type: field.TypeString},
		{Name: "emission_gnre_emission", Type: field.TypeUUID, Unique: true},
	}
	// GnreEmissionTable holds the schema information for the "gnre_emission" table.
	GnreEmissionTable = &schema.Table{
		Name:       "gnre_emission",
		Columns:    GnreEmissionColumns,
		PrimaryKey: []*schema.Column{GnreEmissionColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "gnre_emission_emissions_gnre_emission",
				Columns:    []*schema.Column{GnreEmissionColumns[11]},
				RefColumns: []*schema.Column{EmissionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "username", Type: field.TypeString},
		{Name: "password", Type: field.TypeString},
		{Name: "api_key", Type: field.TypeString, Unique: true},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"USER", "ADMIN"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "client_id", Type: field.TypeUUID},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_clients_users",
				Columns:    []*schema.Column{UsersColumns[8]},
				RefColumns: []*schema.Column{ClientsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "user_username_client_id",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[1], UsersColumns[8]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccessLogsTable,
		ClientsTable,
		EmissionsTable,
		FilesTable,
		GnreEmissionTable,
		UsersTable,
	}
)

func init() {
	ClientsTable.Annotation = &entsql.Annotation{
		Table: "clients",
	}
	GnreEmissionTable.ForeignKeys[0].RefTable = EmissionsTable
	GnreEmissionTable.Annotation = &entsql.Annotation{
		Table: "gnre_emission",
	}
	UsersTable.ForeignKeys[0].RefTable = ClientsTable
}
