// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lucasbonna/contafacil_api/ent/accesslog"
	"github.com/lucasbonna/contafacil_api/ent/clients"
	"github.com/lucasbonna/contafacil_api/ent/emission"
	"github.com/lucasbonna/contafacil_api/ent/file"
	"github.com/lucasbonna/contafacil_api/ent/gnreemission"
	"github.com/lucasbonna/contafacil_api/ent/predicate"
	"github.com/lucasbonna/contafacil_api/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAccessLog    = "AccessLog"
	TypeClients      = "Clients"
	TypeEmission     = "Emission"
	TypeFile         = "File"
	TypeGnreEmission = "GnreEmission"
	TypeUser         = "User"
)

// AccessLogMutation represents an operation that mutates the AccessLog nodes in the graph.
type AccessLogMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	ip               *string
	method           *string
	endpoint         *string
	request_body     *string
	request_headers  *string
	request_params   *string
	request_query    *string
	response_body    *string
	response_headers *string
	response_time    *string
	status_code      *int
	addstatus_code   *int
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*AccessLog, error)
	predicates       []predicate.AccessLog
}

var _ ent.Mutation = (*AccessLogMutation)(nil)

// accesslogOption allows management of the mutation configuration using functional options.
type accesslogOption func(*AccessLogMutation)

// newAccessLogMutation creates new mutation for the AccessLog entity.
func newAccessLogMutation(c config, op Op, opts ...accesslogOption) *AccessLogMutation {
	m := &AccessLogMutation{
		config:        c,
		op:            op,
		typ:           TypeAccessLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAccessLogID sets the ID field of the mutation.
func withAccessLogID(id uuid.UUID) accesslogOption {
	return func(m *AccessLogMutation) {
		var (
			err   error
			once  sync.Once
			value *AccessLog
		)
		m.oldValue = func(ctx context.Context) (*AccessLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AccessLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAccessLog sets the old AccessLog of the mutation.
func withAccessLog(node *AccessLog) accesslogOption {
	return func(m *AccessLogMutation) {
		m.oldValue = func(context.Context) (*AccessLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AccessLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AccessLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AccessLog entities.
func (m *AccessLogMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AccessLogMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AccessLogMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AccessLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIP sets the "ip" field.
func (m *AccessLogMutation) SetIP(s string) {
	m.ip = &s
}

// IP returns the value of the "ip" field in the mutation.
func (m *AccessLogMutation) IP() (r string, exists bool) {
	v := m.ip
	if v == nil {
		return
	}
	return *v, true
}

// OldIP returns the old "ip" field's value of the AccessLog entity.
// If the AccessLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessLogMutation) OldIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIP: %w", err)
	}
	return oldValue.IP, nil
}

// ResetIP resets all changes to the "ip" field.
func (m *AccessLogMutation) ResetIP() {
	m.ip = nil
}

// SetMethod sets the "method" field.
func (m *AccessLogMutation) SetMethod(s string) {
	m.method = &s
}

// Method returns the value of the "method" field in the mutation.
func (m *AccessLogMutation) Method() (r string, exists bool) {
	v := m.method
	if v == nil {
		return
	}
	return *v, true
}

// OldMethod returns the old "method" field's value of the AccessLog entity.
// If the AccessLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessLogMutation) OldMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMethod: %w", err)
	}
	return oldValue.Method, nil
}

// ResetMethod resets all changes to the "method" field.
func (m *AccessLogMutation) ResetMethod() {
	m.method = nil
}

// SetEndpoint sets the "endpoint" field.
func (m *AccessLogMutation) SetEndpoint(s string) {
	m.endpoint = &s
}

// Endpoint returns the value of the "endpoint" field in the mutation.
func (m *AccessLogMutation) Endpoint() (r string, exists bool) {
	v := m.endpoint
	if v == nil {
		return
	}
	return *v, true
}

// OldEndpoint returns the old "endpoint" field's value of the AccessLog entity.
// If the AccessLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessLogMutation) OldEndpoint(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndpoint is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndpoint requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndpoint: %w", err)
	}
	return oldValue.Endpoint, nil
}

// ResetEndpoint resets all changes to the "endpoint" field.
func (m *AccessLogMutation) ResetEndpoint() {
	m.endpoint = nil
}

// SetRequestBody sets the "request_body" field.
func (m *AccessLogMutation) SetRequestBody(s string) {
	m.request_body = &s
}

// RequestBody returns the value of the "request_body" field in the mutation.
func (m *AccessLogMutation) RequestBody() (r string, exists bool) {
	v := m.request_body
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestBody returns the old "request_body" field's value of the AccessLog entity.
// If the AccessLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessLogMutation) OldRequestBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestBody: %w", err)
	}
	return oldValue.RequestBody, nil
}

// ClearRequestBody clears the value of the "request_body" field.
func (m *AccessLogMutation) ClearRequestBody() {
	m.request_body = nil
	m.clearedFields[accesslog.FieldRequestBody] = struct{}{}
}

// RequestBodyCleared returns if the "request_body" field was cleared in this mutation.
func (m *AccessLogMutation) RequestBodyCleared() bool {
	_, ok := m.clearedFields[accesslog.FieldRequestBody]
	return ok
}

// ResetRequestBody resets all changes to the "request_body" field.
func (m *AccessLogMutation) ResetRequestBody() {
	m.request_body = nil
	delete(m.clearedFields, accesslog.FieldRequestBody)
}

// SetRequestHeaders sets the "request_headers" field.
func (m *AccessLogMutation) SetRequestHeaders(s string) {
	m.request_headers = &s
}

// RequestHeaders returns the value of the "request_headers" field in the mutation.
func (m *AccessLogMutation) RequestHeaders() (r string, exists bool) {
	v := m.request_headers
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestHeaders returns the old "request_headers" field's value of the AccessLog entity.
// If the AccessLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessLogMutation) OldRequestHeaders(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestHeaders is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestHeaders requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestHeaders: %w", err)
	}
	return oldValue.RequestHeaders, nil
}

// ClearRequestHeaders clears the value of the "request_headers" field.
func (m *AccessLogMutation) ClearRequestHeaders() {
	m.request_headers = nil
	m.clearedFields[accesslog.FieldRequestHeaders] = struct{}{}
}

// RequestHeadersCleared returns if the "request_headers" field was cleared in this mutation.
func (m *AccessLogMutation) RequestHeadersCleared() bool {
	_, ok := m.clearedFields[accesslog.FieldRequestHeaders]
	return ok
}

// ResetRequestHeaders resets all changes to the "request_headers" field.
func (m *AccessLogMutation) ResetRequestHeaders() {
	m.request_headers = nil
	delete(m.clearedFields, accesslog.FieldRequestHeaders)
}

// SetRequestParams sets the "request_params" field.
func (m *AccessLogMutation) SetRequestParams(s string) {
	m.request_params = &s
}

// RequestParams returns the value of the "request_params" field in the mutation.
func (m *AccessLogMutation) RequestParams() (r string, exists bool) {
	v := m.request_params
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestParams returns the old "request_params" field's value of the AccessLog entity.
// If the AccessLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessLogMutation) OldRequestParams(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestParams is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestParams requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestParams: %w", err)
	}
	return oldValue.RequestParams, nil
}

// ClearRequestParams clears the value of the "request_params" field.
func (m *AccessLogMutation) ClearRequestParams() {
	m.request_params = nil
	m.clearedFields[accesslog.FieldRequestParams] = struct{}{}
}

// RequestParamsCleared returns if the "request_params" field was cleared in this mutation.
func (m *AccessLogMutation) RequestParamsCleared() bool {
	_, ok := m.clearedFields[accesslog.FieldRequestParams]
	return ok
}

// ResetRequestParams resets all changes to the "request_params" field.
func (m *AccessLogMutation) ResetRequestParams() {
	m.request_params = nil
	delete(m.clearedFields, accesslog.FieldRequestParams)
}

// SetRequestQuery sets the "request_query" field.
func (m *AccessLogMutation) SetRequestQuery(s string) {
	m.request_query = &s
}

// RequestQuery returns the value of the "request_query" field in the mutation.
func (m *AccessLogMutation) RequestQuery() (r string, exists bool) {
	v := m.request_query
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestQuery returns the old "request_query" field's value of the AccessLog entity.
// If the AccessLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessLogMutation) OldRequestQuery(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestQuery is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestQuery requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestQuery: %w", err)
	}
	return oldValue.RequestQuery, nil
}

// ClearRequestQuery clears the value of the "request_query" field.
func (m *AccessLogMutation) ClearRequestQuery() {
	m.request_query = nil
	m.clearedFields[accesslog.FieldRequestQuery] = struct{}{}
}

// RequestQueryCleared returns if the "request_query" field was cleared in this mutation.
func (m *AccessLogMutation) RequestQueryCleared() bool {
	_, ok := m.clearedFields[accesslog.FieldRequestQuery]
	return ok
}

// ResetRequestQuery resets all changes to the "request_query" field.
func (m *AccessLogMutation) ResetRequestQuery() {
	m.request_query = nil
	delete(m.clearedFields, accesslog.FieldRequestQuery)
}

// SetResponseBody sets the "response_body" field.
func (m *AccessLogMutation) SetResponseBody(s string) {
	m.response_body = &s
}

// ResponseBody returns the value of the "response_body" field in the mutation.
func (m *AccessLogMutation) ResponseBody() (r string, exists bool) {
	v := m.response_body
	if v == nil {
		return
	}
	return *v, true
}

// OldResponseBody returns the old "response_body" field's value of the AccessLog entity.
// If the AccessLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessLogMutation) OldResponseBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResponseBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResponseBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResponseBody: %w", err)
	}
	return oldValue.ResponseBody, nil
}

// ClearResponseBody clears the value of the "response_body" field.
func (m *AccessLogMutation) ClearResponseBody() {
	m.response_body = nil
	m.clearedFields[accesslog.FieldResponseBody] = struct{}{}
}

// ResponseBodyCleared returns if the "response_body" field was cleared in this mutation.
func (m *AccessLogMutation) ResponseBodyCleared() bool {
	_, ok := m.clearedFields[accesslog.FieldResponseBody]
	return ok
}

// ResetResponseBody resets all changes to the "response_body" field.
func (m *AccessLogMutation) ResetResponseBody() {
	m.response_body = nil
	delete(m.clearedFields, accesslog.FieldResponseBody)
}

// SetResponseHeaders sets the "response_headers" field.
func (m *AccessLogMutation) SetResponseHeaders(s string) {
	m.response_headers = &s
}

// ResponseHeaders returns the value of the "response_headers" field in the mutation.
func (m *AccessLogMutation) ResponseHeaders() (r string, exists bool) {
	v := m.response_headers
	if v == nil {
		return
	}
	return *v, true
}

// OldResponseHeaders returns the old "response_headers" field's value of the AccessLog entity.
// If the AccessLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessLogMutation) OldResponseHeaders(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResponseHeaders is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResponseHeaders requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResponseHeaders: %w", err)
	}
	return oldValue.ResponseHeaders, nil
}

// ClearResponseHeaders clears the value of the "response_headers" field.
func (m *AccessLogMutation) ClearResponseHeaders() {
	m.response_headers = nil
	m.clearedFields[accesslog.FieldResponseHeaders] = struct{}{}
}

// ResponseHeadersCleared returns if the "response_headers" field was cleared in this mutation.
func (m *AccessLogMutation) ResponseHeadersCleared() bool {
	_, ok := m.clearedFields[accesslog.FieldResponseHeaders]
	return ok
}

// ResetResponseHeaders resets all changes to the "response_headers" field.
func (m *AccessLogMutation) ResetResponseHeaders() {
	m.response_headers = nil
	delete(m.clearedFields, accesslog.FieldResponseHeaders)
}

// SetResponseTime sets the "response_time" field.
func (m *AccessLogMutation) SetResponseTime(s string) {
	m.response_time = &s
}

// ResponseTime returns the value of the "response_time" field in the mutation.
func (m *AccessLogMutation) ResponseTime() (r string, exists bool) {
	v := m.response_time
	if v == nil {
		return
	}
	return *v, true
}

// OldResponseTime returns the old "response_time" field's value of the AccessLog entity.
// If the AccessLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessLogMutation) OldResponseTime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResponseTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResponseTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResponseTime: %w", err)
	}
	return oldValue.ResponseTime, nil
}

// ClearResponseTime clears the value of the "response_time" field.
func (m *AccessLogMutation) ClearResponseTime() {
	m.response_time = nil
	m.clearedFields[accesslog.FieldResponseTime] = struct{}{}
}

// ResponseTimeCleared returns if the "response_time" field was cleared in this mutation.
func (m *AccessLogMutation) ResponseTimeCleared() bool {
	_, ok := m.clearedFields[accesslog.FieldResponseTime]
	return ok
}

// ResetResponseTime resets all changes to the "response_time" field.
func (m *AccessLogMutation) ResetResponseTime() {
	m.response_time = nil
	delete(m.clearedFields, accesslog.FieldResponseTime)
}

// SetStatusCode sets the "status_code" field.
func (m *AccessLogMutation) SetStatusCode(i int) {
	m.status_code = &i
	m.addstatus_code = nil
}

// StatusCode returns the value of the "status_code" field in the mutation.
func (m *AccessLogMutation) StatusCode() (r int, exists bool) {
	v := m.status_code
	if v == nil {
		return
	}
	return *v, true
}

// OldStatusCode returns the old "status_code" field's value of the AccessLog entity.
// If the AccessLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessLogMutation) OldStatusCode(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatusCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatusCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatusCode: %w", err)
	}
	return oldValue.StatusCode, nil
}

// AddStatusCode adds i to the "status_code" field.
func (m *AccessLogMutation) AddStatusCode(i int) {
	if m.addstatus_code != nil {
		*m.addstatus_code += i
	} else {
		m.addstatus_code = &i
	}
}

// AddedStatusCode returns the value that was added to the "status_code" field in this mutation.
func (m *AccessLogMutation) AddedStatusCode() (r int, exists bool) {
	v := m.addstatus_code
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatusCode clears the value of the "status_code" field.
func (m *AccessLogMutation) ClearStatusCode() {
	m.status_code = nil
	m.addstatus_code = nil
	m.clearedFields[accesslog.FieldStatusCode] = struct{}{}
}

// StatusCodeCleared returns if the "status_code" field was cleared in this mutation.
func (m *AccessLogMutation) StatusCodeCleared() bool {
	_, ok := m.clearedFields[accesslog.FieldStatusCode]
	return ok
}

// ResetStatusCode resets all changes to the "status_code" field.
func (m *AccessLogMutation) ResetStatusCode() {
	m.status_code = nil
	m.addstatus_code = nil
	delete(m.clearedFields, accesslog.FieldStatusCode)
}

// SetCreatedAt sets the "created_at" field.
func (m *AccessLogMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AccessLogMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AccessLog entity.
// If the AccessLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessLogMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AccessLogMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AccessLogMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AccessLogMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AccessLog entity.
// If the AccessLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessLogMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AccessLogMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the AccessLogMutation builder.
func (m *AccessLogMutation) Where(ps ...predicate.AccessLog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AccessLogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AccessLogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AccessLog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AccessLogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AccessLogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AccessLog).
func (m *AccessLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AccessLogMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.ip != nil {
		fields = append(fields, accesslog.FieldIP)
	}
	if m.method != nil {
		fields = append(fields, accesslog.FieldMethod)
	}
	if m.endpoint != nil {
		fields = append(fields, accesslog.FieldEndpoint)
	}
	if m.request_body != nil {
		fields = append(fields, accesslog.FieldRequestBody)
	}
	if m.request_headers != nil {
		fields = append(fields, accesslog.FieldRequestHeaders)
	}
	if m.request_params != nil {
		fields = append(fields, accesslog.FieldRequestParams)
	}
	if m.request_query != nil {
		fields = append(fields, accesslog.FieldRequestQuery)
	}
	if m.response_body != nil {
		fields = append(fields, accesslog.FieldResponseBody)
	}
	if m.response_headers != nil {
		fields = append(fields, accesslog.FieldResponseHeaders)
	}
	if m.response_time != nil {
		fields = append(fields, accesslog.FieldResponseTime)
	}
	if m.status_code != nil {
		fields = append(fields, accesslog.FieldStatusCode)
	}
	if m.created_at != nil {
		fields = append(fields, accesslog.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, accesslog.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AccessLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case accesslog.FieldIP:
		return m.IP()
	case accesslog.FieldMethod:
		return m.Method()
	case accesslog.FieldEndpoint:
		return m.Endpoint()
	case accesslog.FieldRequestBody:
		return m.RequestBody()
	case accesslog.FieldRequestHeaders:
		return m.RequestHeaders()
	case accesslog.FieldRequestParams:
		return m.RequestParams()
	case accesslog.FieldRequestQuery:
		return m.RequestQuery()
	case accesslog.FieldResponseBody:
		return m.ResponseBody()
	case accesslog.FieldResponseHeaders:
		return m.ResponseHeaders()
	case accesslog.FieldResponseTime:
		return m.ResponseTime()
	case accesslog.FieldStatusCode:
		return m.StatusCode()
	case accesslog.FieldCreatedAt:
		return m.CreatedAt()
	case accesslog.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AccessLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case accesslog.FieldIP:
		return m.OldIP(ctx)
	case accesslog.FieldMethod:
		return m.OldMethod(ctx)
	case accesslog.FieldEndpoint:
		return m.OldEndpoint(ctx)
	case accesslog.FieldRequestBody:
		return m.OldRequestBody(ctx)
	case accesslog.FieldRequestHeaders:
		return m.OldRequestHeaders(ctx)
	case accesslog.FieldRequestParams:
		return m.OldRequestParams(ctx)
	case accesslog.FieldRequestQuery:
		return m.OldRequestQuery(ctx)
	case accesslog.FieldResponseBody:
		return m.OldResponseBody(ctx)
	case accesslog.FieldResponseHeaders:
		return m.OldResponseHeaders(ctx)
	case accesslog.FieldResponseTime:
		return m.OldResponseTime(ctx)
	case accesslog.FieldStatusCode:
		return m.OldStatusCode(ctx)
	case accesslog.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case accesslog.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown AccessLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccessLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case accesslog.FieldIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIP(v)
		return nil
	case accesslog.FieldMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMethod(v)
		return nil
	case accesslog.FieldEndpoint:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndpoint(v)
		return nil
	case accesslog.FieldRequestBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestBody(v)
		return nil
	case accesslog.FieldRequestHeaders:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestHeaders(v)
		return nil
	case accesslog.FieldRequestParams:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestParams(v)
		return nil
	case accesslog.FieldRequestQuery:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestQuery(v)
		return nil
	case accesslog.FieldResponseBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResponseBody(v)
		return nil
	case accesslog.FieldResponseHeaders:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResponseHeaders(v)
		return nil
	case accesslog.FieldResponseTime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResponseTime(v)
		return nil
	case accesslog.FieldStatusCode:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatusCode(v)
		return nil
	case accesslog.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case accesslog.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown AccessLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AccessLogMutation) AddedFields() []string {
	var fields []string
	if m.addstatus_code != nil {
		fields = append(fields, accesslog.FieldStatusCode)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AccessLogMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case accesslog.FieldStatusCode:
		return m.AddedStatusCode()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccessLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	case accesslog.FieldStatusCode:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatusCode(v)
		return nil
	}
	return fmt.Errorf("unknown AccessLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AccessLogMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(accesslog.FieldRequestBody) {
		fields = append(fields, accesslog.FieldRequestBody)
	}
	if m.FieldCleared(accesslog.FieldRequestHeaders) {
		fields = append(fields, accesslog.FieldRequestHeaders)
	}
	if m.FieldCleared(accesslog.FieldRequestParams) {
		fields = append(fields, accesslog.FieldRequestParams)
	}
	if m.FieldCleared(accesslog.FieldRequestQuery) {
		fields = append(fields, accesslog.FieldRequestQuery)
	}
	if m.FieldCleared(accesslog.FieldResponseBody) {
		fields = append(fields, accesslog.FieldResponseBody)
	}
	if m.FieldCleared(accesslog.FieldResponseHeaders) {
		fields = append(fields, accesslog.FieldResponseHeaders)
	}
	if m.FieldCleared(accesslog.FieldResponseTime) {
		fields = append(fields, accesslog.FieldResponseTime)
	}
	if m.FieldCleared(accesslog.FieldStatusCode) {
		fields = append(fields, accesslog.FieldStatusCode)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AccessLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AccessLogMutation) ClearField(name string) error {
	switch name {
	case accesslog.FieldRequestBody:
		m.ClearRequestBody()
		return nil
	case accesslog.FieldRequestHeaders:
		m.ClearRequestHeaders()
		return nil
	case accesslog.FieldRequestParams:
		m.ClearRequestParams()
		return nil
	case accesslog.FieldRequestQuery:
		m.ClearRequestQuery()
		return nil
	case accesslog.FieldResponseBody:
		m.ClearResponseBody()
		return nil
	case accesslog.FieldResponseHeaders:
		m.ClearResponseHeaders()
		return nil
	case accesslog.FieldResponseTime:
		m.ClearResponseTime()
		return nil
	case accesslog.FieldStatusCode:
		m.ClearStatusCode()
		return nil
	}
	return fmt.Errorf("unknown AccessLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AccessLogMutation) ResetField(name string) error {
	switch name {
	case accesslog.FieldIP:
		m.ResetIP()
		return nil
	case accesslog.FieldMethod:
		m.ResetMethod()
		return nil
	case accesslog.FieldEndpoint:
		m.ResetEndpoint()
		return nil
	case accesslog.FieldRequestBody:
		m.ResetRequestBody()
		return nil
	case accesslog.FieldRequestHeaders:
		m.ResetRequestHeaders()
		return nil
	case accesslog.FieldRequestParams:
		m.ResetRequestParams()
		return nil
	case accesslog.FieldRequestQuery:
		m.ResetRequestQuery()
		return nil
	case accesslog.FieldResponseBody:
		m.ResetResponseBody()
		return nil
	case accesslog.FieldResponseHeaders:
		m.ResetResponseHeaders()
		return nil
	case accesslog.FieldResponseTime:
		m.ResetResponseTime()
		return nil
	case accesslog.FieldStatusCode:
		m.ResetStatusCode()
		return nil
	case accesslog.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case accesslog.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown AccessLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AccessLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AccessLogMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AccessLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AccessLogMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AccessLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AccessLogMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AccessLogMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AccessLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AccessLogMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AccessLog edge %s", name)
}

// ClientsMutation represents an operation that mutates the Clients nodes in the graph.
type ClientsMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	name          *string
	cnpj          *string
	role          *clients.Role
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	clearedFields map[string]struct{}
	users         map[uuid.UUID]struct{}
	removedusers  map[uuid.UUID]struct{}
	clearedusers  bool
	done          bool
	oldValue      func(context.Context) (*Clients, error)
	predicates    []predicate.Clients
}

var _ ent.Mutation = (*ClientsMutation)(nil)

// clientsOption allows management of the mutation configuration using functional options.
type clientsOption func(*ClientsMutation)

// newClientsMutation creates new mutation for the Clients entity.
func newClientsMutation(c config, op Op, opts ...clientsOption) *ClientsMutation {
	m := &ClientsMutation{
		config:        c,
		op:            op,
		typ:           TypeClients,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withClientsID sets the ID field of the mutation.
func withClientsID(id uuid.UUID) clientsOption {
	return func(m *ClientsMutation) {
		var (
			err   error
			once  sync.Once
			value *Clients
		)
		m.oldValue = func(ctx context.Context) (*Clients, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Clients.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withClients sets the old Clients of the mutation.
func withClients(node *Clients) clientsOption {
	return func(m *ClientsMutation) {
		m.oldValue = func(context.Context) (*Clients, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ClientsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ClientsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Clients entities.
func (m *ClientsMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ClientsMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ClientsMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Clients.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ClientsMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ClientsMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Clients entity.
// If the Clients object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientsMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ClientsMutation) ResetName() {
	m.name = nil
}

// SetCnpj sets the "cnpj" field.
func (m *ClientsMutation) SetCnpj(s string) {
	m.cnpj = &s
}

// Cnpj returns the value of the "cnpj" field in the mutation.
func (m *ClientsMutation) Cnpj() (r string, exists bool) {
	v := m.cnpj
	if v == nil {
		return
	}
	return *v, true
}

// OldCnpj returns the old "cnpj" field's value of the Clients entity.
// If the Clients object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientsMutation) OldCnpj(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCnpj is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCnpj requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCnpj: %w", err)
	}
	return oldValue.Cnpj, nil
}

// ResetCnpj resets all changes to the "cnpj" field.
func (m *ClientsMutation) ResetCnpj() {
	m.cnpj = nil
}

// SetRole sets the "role" field.
func (m *ClientsMutation) SetRole(c clients.Role) {
	m.role = &c
}

// Role returns the value of the "role" field in the mutation.
func (m *ClientsMutation) Role() (r clients.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the Clients entity.
// If the Clients object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientsMutation) OldRole(ctx context.Context) (v clients.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *ClientsMutation) ResetRole() {
	m.role = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ClientsMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ClientsMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Clients entity.
// If the Clients object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientsMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ClientsMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ClientsMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ClientsMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Clients entity.
// If the Clients object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientsMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ClientsMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ClientsMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ClientsMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Clients entity.
// If the Clients object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientsMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ClientsMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[clients.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ClientsMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[clients.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ClientsMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, clients.FieldDeletedAt)
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *ClientsMutation) AddUserIDs(ids ...uuid.UUID) {
	if m.users == nil {
		m.users = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *ClientsMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *ClientsMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *ClientsMutation) RemoveUserIDs(ids ...uuid.UUID) {
	if m.removedusers == nil {
		m.removedusers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *ClientsMutation) RemovedUsersIDs() (ids []uuid.UUID) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *ClientsMutation) UsersIDs() (ids []uuid.UUID) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *ClientsMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// Where appends a list predicates to the ClientsMutation builder.
func (m *ClientsMutation) Where(ps ...predicate.Clients) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ClientsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ClientsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Clients, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ClientsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ClientsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Clients).
func (m *ClientsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ClientsMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, clients.FieldName)
	}
	if m.cnpj != nil {
		fields = append(fields, clients.FieldCnpj)
	}
	if m.role != nil {
		fields = append(fields, clients.FieldRole)
	}
	if m.created_at != nil {
		fields = append(fields, clients.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, clients.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, clients.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ClientsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case clients.FieldName:
		return m.Name()
	case clients.FieldCnpj:
		return m.Cnpj()
	case clients.FieldRole:
		return m.Role()
	case clients.FieldCreatedAt:
		return m.CreatedAt()
	case clients.FieldUpdatedAt:
		return m.UpdatedAt()
	case clients.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ClientsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case clients.FieldName:
		return m.OldName(ctx)
	case clients.FieldCnpj:
		return m.OldCnpj(ctx)
	case clients.FieldRole:
		return m.OldRole(ctx)
	case clients.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case clients.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case clients.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Clients field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClientsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case clients.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case clients.FieldCnpj:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCnpj(v)
		return nil
	case clients.FieldRole:
		v, ok := value.(clients.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case clients.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case clients.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case clients.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Clients field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ClientsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ClientsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClientsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Clients numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ClientsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(clients.FieldDeletedAt) {
		fields = append(fields, clients.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ClientsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ClientsMutation) ClearField(name string) error {
	switch name {
	case clients.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Clients nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ClientsMutation) ResetField(name string) error {
	switch name {
	case clients.FieldName:
		m.ResetName()
		return nil
	case clients.FieldCnpj:
		m.ResetCnpj()
		return nil
	case clients.FieldRole:
		m.ResetRole()
		return nil
	case clients.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case clients.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case clients.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Clients field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ClientsMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.users != nil {
		edges = append(edges, clients.EdgeUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ClientsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case clients.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ClientsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedusers != nil {
		edges = append(edges, clients.EdgeUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ClientsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case clients.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ClientsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedusers {
		edges = append(edges, clients.EdgeUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ClientsMutation) EdgeCleared(name string) bool {
	switch name {
	case clients.EdgeUsers:
		return m.clearedusers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ClientsMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Clients unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ClientsMutation) ResetEdge(name string) error {
	switch name {
	case clients.EdgeUsers:
		m.ResetUsers()
		return nil
	}
	return fmt.Errorf("unknown Clients edge %s", name)
}

// EmissionMutation represents an operation that mutates the Emission nodes in the graph.
type EmissionMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	emission_type        *emission.EmissionType
	client_id            *uuid.UUID
	message              *string
	status               *emission.Status
	user_id              *uuid.UUID
	created_at           *time.Time
	updated_at           *time.Time
	deleted_at           *time.Time
	clearedFields        map[string]struct{}
	gnre_emission        *uuid.UUID
	clearedgnre_emission bool
	done                 bool
	oldValue             func(context.Context) (*Emission, error)
	predicates           []predicate.Emission
}

var _ ent.Mutation = (*EmissionMutation)(nil)

// emissionOption allows management of the mutation configuration using functional options.
type emissionOption func(*EmissionMutation)

// newEmissionMutation creates new mutation for the Emission entity.
func newEmissionMutation(c config, op Op, opts ...emissionOption) *EmissionMutation {
	m := &EmissionMutation{
		config:        c,
		op:            op,
		typ:           TypeEmission,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmissionID sets the ID field of the mutation.
func withEmissionID(id uuid.UUID) emissionOption {
	return func(m *EmissionMutation) {
		var (
			err   error
			once  sync.Once
			value *Emission
		)
		m.oldValue = func(ctx context.Context) (*Emission, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Emission.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmission sets the old Emission of the mutation.
func withEmission(node *Emission) emissionOption {
	return func(m *EmissionMutation) {
		m.oldValue = func(context.Context) (*Emission, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmissionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmissionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Emission entities.
func (m *EmissionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EmissionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EmissionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Emission.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmissionType sets the "emission_type" field.
func (m *EmissionMutation) SetEmissionType(et emission.EmissionType) {
	m.emission_type = &et
}

// EmissionType returns the value of the "emission_type" field in the mutation.
func (m *EmissionMutation) EmissionType() (r emission.EmissionType, exists bool) {
	v := m.emission_type
	if v == nil {
		return
	}
	return *v, true
}

// OldEmissionType returns the old "emission_type" field's value of the Emission entity.
// If the Emission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmissionMutation) OldEmissionType(ctx context.Context) (v emission.EmissionType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmissionType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmissionType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmissionType: %w", err)
	}
	return oldValue.EmissionType, nil
}

// ResetEmissionType resets all changes to the "emission_type" field.
func (m *EmissionMutation) ResetEmissionType() {
	m.emission_type = nil
}

// SetClientID sets the "client_id" field.
func (m *EmissionMutation) SetClientID(u uuid.UUID) {
	m.client_id = &u
}

// ClientID returns the value of the "client_id" field in the mutation.
func (m *EmissionMutation) ClientID() (r uuid.UUID, exists bool) {
	v := m.client_id
	if v == nil {
		return
	}
	return *v, true
}

// OldClientID returns the old "client_id" field's value of the Emission entity.
// If the Emission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmissionMutation) OldClientID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientID: %w", err)
	}
	return oldValue.ClientID, nil
}

// ResetClientID resets all changes to the "client_id" field.
func (m *EmissionMutation) ResetClientID() {
	m.client_id = nil
}

// SetMessage sets the "message" field.
func (m *EmissionMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *EmissionMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the Emission entity.
// If the Emission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmissionMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ClearMessage clears the value of the "message" field.
func (m *EmissionMutation) ClearMessage() {
	m.message = nil
	m.clearedFields[emission.FieldMessage] = struct{}{}
}

// MessageCleared returns if the "message" field was cleared in this mutation.
func (m *EmissionMutation) MessageCleared() bool {
	_, ok := m.clearedFields[emission.FieldMessage]
	return ok
}

// ResetMessage resets all changes to the "message" field.
func (m *EmissionMutation) ResetMessage() {
	m.message = nil
	delete(m.clearedFields, emission.FieldMessage)
}

// SetStatus sets the "status" field.
func (m *EmissionMutation) SetStatus(e emission.Status) {
	m.status = &e
}

// Status returns the value of the "status" field in the mutation.
func (m *EmissionMutation) Status() (r emission.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Emission entity.
// If the Emission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmissionMutation) OldStatus(ctx context.Context) (v emission.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *EmissionMutation) ResetStatus() {
	m.status = nil
}

// SetUserID sets the "user_id" field.
func (m *EmissionMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *EmissionMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Emission entity.
// If the Emission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmissionMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *EmissionMutation) ResetUserID() {
	m.user_id = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *EmissionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EmissionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Emission entity.
// If the Emission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmissionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EmissionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *EmissionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *EmissionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Emission entity.
// If the Emission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmissionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *EmissionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *EmissionMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *EmissionMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Emission entity.
// If the Emission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmissionMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *EmissionMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[emission.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *EmissionMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[emission.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *EmissionMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, emission.FieldDeletedAt)
}

// SetGnreEmissionID sets the "gnre_emission" edge to the GnreEmission entity by id.
func (m *EmissionMutation) SetGnreEmissionID(id uuid.UUID) {
	m.gnre_emission = &id
}

// ClearGnreEmission clears the "gnre_emission" edge to the GnreEmission entity.
func (m *EmissionMutation) ClearGnreEmission() {
	m.clearedgnre_emission = true
}

// GnreEmissionCleared reports if the "gnre_emission" edge to the GnreEmission entity was cleared.
func (m *EmissionMutation) GnreEmissionCleared() bool {
	return m.clearedgnre_emission
}

// GnreEmissionID returns the "gnre_emission" edge ID in the mutation.
func (m *EmissionMutation) GnreEmissionID() (id uuid.UUID, exists bool) {
	if m.gnre_emission != nil {
		return *m.gnre_emission, true
	}
	return
}

// GnreEmissionIDs returns the "gnre_emission" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GnreEmissionID instead. It exists only for internal usage by the builders.
func (m *EmissionMutation) GnreEmissionIDs() (ids []uuid.UUID) {
	if id := m.gnre_emission; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGnreEmission resets all changes to the "gnre_emission" edge.
func (m *EmissionMutation) ResetGnreEmission() {
	m.gnre_emission = nil
	m.clearedgnre_emission = false
}

// Where appends a list predicates to the EmissionMutation builder.
func (m *EmissionMutation) Where(ps ...predicate.Emission) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EmissionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EmissionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Emission, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EmissionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EmissionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Emission).
func (m *EmissionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmissionMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.emission_type != nil {
		fields = append(fields, emission.FieldEmissionType)
	}
	if m.client_id != nil {
		fields = append(fields, emission.FieldClientID)
	}
	if m.message != nil {
		fields = append(fields, emission.FieldMessage)
	}
	if m.status != nil {
		fields = append(fields, emission.FieldStatus)
	}
	if m.user_id != nil {
		fields = append(fields, emission.FieldUserID)
	}
	if m.created_at != nil {
		fields = append(fields, emission.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, emission.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, emission.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmissionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case emission.FieldEmissionType:
		return m.EmissionType()
	case emission.FieldClientID:
		return m.ClientID()
	case emission.FieldMessage:
		return m.Message()
	case emission.FieldStatus:
		return m.Status()
	case emission.FieldUserID:
		return m.UserID()
	case emission.FieldCreatedAt:
		return m.CreatedAt()
	case emission.FieldUpdatedAt:
		return m.UpdatedAt()
	case emission.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmissionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case emission.FieldEmissionType:
		return m.OldEmissionType(ctx)
	case emission.FieldClientID:
		return m.OldClientID(ctx)
	case emission.FieldMessage:
		return m.OldMessage(ctx)
	case emission.FieldStatus:
		return m.OldStatus(ctx)
	case emission.FieldUserID:
		return m.OldUserID(ctx)
	case emission.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case emission.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case emission.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Emission field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmissionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case emission.FieldEmissionType:
		v, ok := value.(emission.EmissionType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmissionType(v)
		return nil
	case emission.FieldClientID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientID(v)
		return nil
	case emission.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case emission.FieldStatus:
		v, ok := value.(emission.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case emission.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case emission.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case emission.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case emission.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Emission field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmissionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmissionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmissionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Emission numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmissionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(emission.FieldMessage) {
		fields = append(fields, emission.FieldMessage)
	}
	if m.FieldCleared(emission.FieldDeletedAt) {
		fields = append(fields, emission.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmissionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmissionMutation) ClearField(name string) error {
	switch name {
	case emission.FieldMessage:
		m.ClearMessage()
		return nil
	case emission.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Emission nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmissionMutation) ResetField(name string) error {
	switch name {
	case emission.FieldEmissionType:
		m.ResetEmissionType()
		return nil
	case emission.FieldClientID:
		m.ResetClientID()
		return nil
	case emission.FieldMessage:
		m.ResetMessage()
		return nil
	case emission.FieldStatus:
		m.ResetStatus()
		return nil
	case emission.FieldUserID:
		m.ResetUserID()
		return nil
	case emission.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case emission.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case emission.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Emission field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmissionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.gnre_emission != nil {
		edges = append(edges, emission.EdgeGnreEmission)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmissionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case emission.EdgeGnreEmission:
		if id := m.gnre_emission; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmissionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmissionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmissionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedgnre_emission {
		edges = append(edges, emission.EdgeGnreEmission)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmissionMutation) EdgeCleared(name string) bool {
	switch name {
	case emission.EdgeGnreEmission:
		return m.clearedgnre_emission
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmissionMutation) ClearEdge(name string) error {
	switch name {
	case emission.EdgeGnreEmission:
		m.ClearGnreEmission()
		return nil
	}
	return fmt.Errorf("unknown Emission unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmissionMutation) ResetEdge(name string) error {
	switch name {
	case emission.EdgeGnreEmission:
		m.ResetGnreEmission()
		return nil
	}
	return fmt.Errorf("unknown Emission edge %s", name)
}

// FileMutation represents an operation that mutates the File nodes in the graph.
type FileMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	name          *string
	extension     *string
	content_type  *string
	file_path     *string
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*File, error)
	predicates    []predicate.File
}

var _ ent.Mutation = (*FileMutation)(nil)

// fileOption allows management of the mutation configuration using functional options.
type fileOption func(*FileMutation)

// newFileMutation creates new mutation for the File entity.
func newFileMutation(c config, op Op, opts ...fileOption) *FileMutation {
	m := &FileMutation{
		config:        c,
		op:            op,
		typ:           TypeFile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFileID sets the ID field of the mutation.
func withFileID(id uuid.UUID) fileOption {
	return func(m *FileMutation) {
		var (
			err   error
			once  sync.Once
			value *File
		)
		m.oldValue = func(ctx context.Context) (*File, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().File.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFile sets the old File of the mutation.
func withFile(node *File) fileOption {
	return func(m *FileMutation) {
		m.oldValue = func(context.Context) (*File, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of File entities.
func (m *FileMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FileMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FileMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().File.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *FileMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *FileMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *FileMutation) ResetName() {
	m.name = nil
}

// SetExtension sets the "extension" field.
func (m *FileMutation) SetExtension(s string) {
	m.extension = &s
}

// Extension returns the value of the "extension" field in the mutation.
func (m *FileMutation) Extension() (r string, exists bool) {
	v := m.extension
	if v == nil {
		return
	}
	return *v, true
}

// OldExtension returns the old "extension" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldExtension(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtension is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtension requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtension: %w", err)
	}
	return oldValue.Extension, nil
}

// ResetExtension resets all changes to the "extension" field.
func (m *FileMutation) ResetExtension() {
	m.extension = nil
}

// SetContentType sets the "content_type" field.
func (m *FileMutation) SetContentType(s string) {
	m.content_type = &s
}

// ContentType returns the value of the "content_type" field in the mutation.
func (m *FileMutation) ContentType() (r string, exists bool) {
	v := m.content_type
	if v == nil {
		return
	}
	return *v, true
}

// OldContentType returns the old "content_type" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldContentType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentType: %w", err)
	}
	return oldValue.ContentType, nil
}

// ResetContentType resets all changes to the "content_type" field.
func (m *FileMutation) ResetContentType() {
	m.content_type = nil
}

// SetFilePath sets the "file_path" field.
func (m *FileMutation) SetFilePath(s string) {
	m.file_path = &s
}

// FilePath returns the value of the "file_path" field in the mutation.
func (m *FileMutation) FilePath() (r string, exists bool) {
	v := m.file_path
	if v == nil {
		return
	}
	return *v, true
}

// OldFilePath returns the old "file_path" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldFilePath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilePath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilePath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilePath: %w", err)
	}
	return oldValue.FilePath, nil
}

// ResetFilePath resets all changes to the "file_path" field.
func (m *FileMutation) ResetFilePath() {
	m.file_path = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *FileMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FileMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FileMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FileMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FileMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FileMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *FileMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *FileMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *FileMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[file.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *FileMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[file.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *FileMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, file.FieldDeletedAt)
}

// Where appends a list predicates to the FileMutation builder.
func (m *FileMutation) Where(ps ...predicate.File) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FileMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FileMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.File, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FileMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FileMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (File).
func (m *FileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FileMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, file.FieldName)
	}
	if m.extension != nil {
		fields = append(fields, file.FieldExtension)
	}
	if m.content_type != nil {
		fields = append(fields, file.FieldContentType)
	}
	if m.file_path != nil {
		fields = append(fields, file.FieldFilePath)
	}
	if m.created_at != nil {
		fields = append(fields, file.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, file.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, file.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case file.FieldName:
		return m.Name()
	case file.FieldExtension:
		return m.Extension()
	case file.FieldContentType:
		return m.ContentType()
	case file.FieldFilePath:
		return m.FilePath()
	case file.FieldCreatedAt:
		return m.CreatedAt()
	case file.FieldUpdatedAt:
		return m.UpdatedAt()
	case file.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case file.FieldName:
		return m.OldName(ctx)
	case file.FieldExtension:
		return m.OldExtension(ctx)
	case file.FieldContentType:
		return m.OldContentType(ctx)
	case file.FieldFilePath:
		return m.OldFilePath(ctx)
	case file.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case file.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case file.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown File field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case file.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case file.FieldExtension:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtension(v)
		return nil
	case file.FieldContentType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentType(v)
		return nil
	case file.FieldFilePath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilePath(v)
		return nil
	case file.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case file.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case file.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown File field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FileMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FileMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown File numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FileMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(file.FieldDeletedAt) {
		fields = append(fields, file.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FileMutation) ClearField(name string) error {
	switch name {
	case file.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown File nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FileMutation) ResetField(name string) error {
	switch name {
	case file.FieldName:
		m.ResetName()
		return nil
	case file.FieldExtension:
		m.ResetExtension()
		return nil
	case file.FieldContentType:
		m.ResetContentType()
		return nil
	case file.FieldFilePath:
		m.ResetFilePath()
		return nil
	case file.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case file.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case file.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown File field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FileMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FileMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FileMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FileMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FileMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown File unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FileMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown File edge %s", name)
}

// GnreEmissionMutation represents an operation that mutates the GnreEmission nodes in the graph.
type GnreEmissionMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	xml             *uuid.UUID
	pdf             *uuid.UUID
	comprovante_pdf *uuid.UUID
	guia_amount     *float64
	addguia_amount  *float64
	numero_recibo   *string
	chave_nota      *string
	cod_barras_guia *string
	num_nota        *string
	destinatario    *string
	cpf_cnpj        *string
	clearedFields   map[string]struct{}
	emission        *uuid.UUID
	clearedemission bool
	done            bool
	oldValue        func(context.Context) (*GnreEmission, error)
	predicates      []predicate.GnreEmission
}

var _ ent.Mutation = (*GnreEmissionMutation)(nil)

// gnreemissionOption allows management of the mutation configuration using functional options.
type gnreemissionOption func(*GnreEmissionMutation)

// newGnreEmissionMutation creates new mutation for the GnreEmission entity.
func newGnreEmissionMutation(c config, op Op, opts ...gnreemissionOption) *GnreEmissionMutation {
	m := &GnreEmissionMutation{
		config:        c,
		op:            op,
		typ:           TypeGnreEmission,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGnreEmissionID sets the ID field of the mutation.
func withGnreEmissionID(id uuid.UUID) gnreemissionOption {
	return func(m *GnreEmissionMutation) {
		var (
			err   error
			once  sync.Once
			value *GnreEmission
		)
		m.oldValue = func(ctx context.Context) (*GnreEmission, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GnreEmission.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGnreEmission sets the old GnreEmission of the mutation.
func withGnreEmission(node *GnreEmission) gnreemissionOption {
	return func(m *GnreEmissionMutation) {
		m.oldValue = func(context.Context) (*GnreEmission, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GnreEmissionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GnreEmissionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GnreEmission entities.
func (m *GnreEmissionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GnreEmissionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GnreEmissionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GnreEmission.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetXML sets the "xml" field.
func (m *GnreEmissionMutation) SetXML(u uuid.UUID) {
	m.xml = &u
}

// XML returns the value of the "xml" field in the mutation.
func (m *GnreEmissionMutation) XML() (r uuid.UUID, exists bool) {
	v := m.xml
	if v == nil {
		return
	}
	return *v, true
}

// OldXML returns the old "xml" field's value of the GnreEmission entity.
// If the GnreEmission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GnreEmissionMutation) OldXML(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldXML is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldXML requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldXML: %w", err)
	}
	return oldValue.XML, nil
}

// ResetXML resets all changes to the "xml" field.
func (m *GnreEmissionMutation) ResetXML() {
	m.xml = nil
}

// SetPdf sets the "pdf" field.
func (m *GnreEmissionMutation) SetPdf(u uuid.UUID) {
	m.pdf = &u
}

// Pdf returns the value of the "pdf" field in the mutation.
func (m *GnreEmissionMutation) Pdf() (r uuid.UUID, exists bool) {
	v := m.pdf
	if v == nil {
		return
	}
	return *v, true
}

// OldPdf returns the old "pdf" field's value of the GnreEmission entity.
// If the GnreEmission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GnreEmissionMutation) OldPdf(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPdf is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPdf requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPdf: %w", err)
	}
	return oldValue.Pdf, nil
}

// ClearPdf clears the value of the "pdf" field.
func (m *GnreEmissionMutation) ClearPdf() {
	m.pdf = nil
	m.clearedFields[gnreemission.FieldPdf] = struct{}{}
}

// PdfCleared returns if the "pdf" field was cleared in this mutation.
func (m *GnreEmissionMutation) PdfCleared() bool {
	_, ok := m.clearedFields[gnreemission.FieldPdf]
	return ok
}

// ResetPdf resets all changes to the "pdf" field.
func (m *GnreEmissionMutation) ResetPdf() {
	m.pdf = nil
	delete(m.clearedFields, gnreemission.FieldPdf)
}

// SetComprovantePdf sets the "comprovante_pdf" field.
func (m *GnreEmissionMutation) SetComprovantePdf(u uuid.UUID) {
	m.comprovante_pdf = &u
}

// ComprovantePdf returns the value of the "comprovante_pdf" field in the mutation.
func (m *GnreEmissionMutation) ComprovantePdf() (r uuid.UUID, exists bool) {
	v := m.comprovante_pdf
	if v == nil {
		return
	}
	return *v, true
}

// OldComprovantePdf returns the old "comprovante_pdf" field's value of the GnreEmission entity.
// If the GnreEmission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GnreEmissionMutation) OldComprovantePdf(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComprovantePdf is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComprovantePdf requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComprovantePdf: %w", err)
	}
	return oldValue.ComprovantePdf, nil
}

// ClearComprovantePdf clears the value of the "comprovante_pdf" field.
func (m *GnreEmissionMutation) ClearComprovantePdf() {
	m.comprovante_pdf = nil
	m.clearedFields[gnreemission.FieldComprovantePdf] = struct{}{}
}

// ComprovantePdfCleared returns if the "comprovante_pdf" field was cleared in this mutation.
func (m *GnreEmissionMutation) ComprovantePdfCleared() bool {
	_, ok := m.clearedFields[gnreemission.FieldComprovantePdf]
	return ok
}

// ResetComprovantePdf resets all changes to the "comprovante_pdf" field.
func (m *GnreEmissionMutation) ResetComprovantePdf() {
	m.comprovante_pdf = nil
	delete(m.clearedFields, gnreemission.FieldComprovantePdf)
}

// SetGuiaAmount sets the "guia_amount" field.
func (m *GnreEmissionMutation) SetGuiaAmount(f float64) {
	m.guia_amount = &f
	m.addguia_amount = nil
}

// GuiaAmount returns the value of the "guia_amount" field in the mutation.
func (m *GnreEmissionMutation) GuiaAmount() (r float64, exists bool) {
	v := m.guia_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldGuiaAmount returns the old "guia_amount" field's value of the GnreEmission entity.
// If the GnreEmission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GnreEmissionMutation) OldGuiaAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGuiaAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGuiaAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGuiaAmount: %w", err)
	}
	return oldValue.GuiaAmount, nil
}

// AddGuiaAmount adds f to the "guia_amount" field.
func (m *GnreEmissionMutation) AddGuiaAmount(f float64) {
	if m.addguia_amount != nil {
		*m.addguia_amount += f
	} else {
		m.addguia_amount = &f
	}
}

// AddedGuiaAmount returns the value that was added to the "guia_amount" field in this mutation.
func (m *GnreEmissionMutation) AddedGuiaAmount() (r float64, exists bool) {
	v := m.addguia_amount
	if v == nil {
		return
	}
	return *v, true
}

// ResetGuiaAmount resets all changes to the "guia_amount" field.
func (m *GnreEmissionMutation) ResetGuiaAmount() {
	m.guia_amount = nil
	m.addguia_amount = nil
}

// SetNumeroRecibo sets the "numero_recibo" field.
func (m *GnreEmissionMutation) SetNumeroRecibo(s string) {
	m.numero_recibo = &s
}

// NumeroRecibo returns the value of the "numero_recibo" field in the mutation.
func (m *GnreEmissionMutation) NumeroRecibo() (r string, exists bool) {
	v := m.numero_recibo
	if v == nil {
		return
	}
	return *v, true
}

// OldNumeroRecibo returns the old "numero_recibo" field's value of the GnreEmission entity.
// If the GnreEmission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GnreEmissionMutation) OldNumeroRecibo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumeroRecibo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumeroRecibo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumeroRecibo: %w", err)
	}
	return oldValue.NumeroRecibo, nil
}

// ClearNumeroRecibo clears the value of the "numero_recibo" field.
func (m *GnreEmissionMutation) ClearNumeroRecibo() {
	m.numero_recibo = nil
	m.clearedFields[gnreemission.FieldNumeroRecibo] = struct{}{}
}

// NumeroReciboCleared returns if the "numero_recibo" field was cleared in this mutation.
func (m *GnreEmissionMutation) NumeroReciboCleared() bool {
	_, ok := m.clearedFields[gnreemission.FieldNumeroRecibo]
	return ok
}

// ResetNumeroRecibo resets all changes to the "numero_recibo" field.
func (m *GnreEmissionMutation) ResetNumeroRecibo() {
	m.numero_recibo = nil
	delete(m.clearedFields, gnreemission.FieldNumeroRecibo)
}

// SetChaveNota sets the "chave_nota" field.
func (m *GnreEmissionMutation) SetChaveNota(s string) {
	m.chave_nota = &s
}

// ChaveNota returns the value of the "chave_nota" field in the mutation.
func (m *GnreEmissionMutation) ChaveNota() (r string, exists bool) {
	v := m.chave_nota
	if v == nil {
		return
	}
	return *v, true
}

// OldChaveNota returns the old "chave_nota" field's value of the GnreEmission entity.
// If the GnreEmission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GnreEmissionMutation) OldChaveNota(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChaveNota is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChaveNota requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChaveNota: %w", err)
	}
	return oldValue.ChaveNota, nil
}

// ResetChaveNota resets all changes to the "chave_nota" field.
func (m *GnreEmissionMutation) ResetChaveNota() {
	m.chave_nota = nil
}

// SetCodBarrasGuia sets the "cod_barras_guia" field.
func (m *GnreEmissionMutation) SetCodBarrasGuia(s string) {
	m.cod_barras_guia = &s
}

// CodBarrasGuia returns the value of the "cod_barras_guia" field in the mutation.
func (m *GnreEmissionMutation) CodBarrasGuia() (r string, exists bool) {
	v := m.cod_barras_guia
	if v == nil {
		return
	}
	return *v, true
}

// OldCodBarrasGuia returns the old "cod_barras_guia" field's value of the GnreEmission entity.
// If the GnreEmission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GnreEmissionMutation) OldCodBarrasGuia(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCodBarrasGuia is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCodBarrasGuia requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCodBarrasGuia: %w", err)
	}
	return oldValue.CodBarrasGuia, nil
}

// ClearCodBarrasGuia clears the value of the "cod_barras_guia" field.
func (m *GnreEmissionMutation) ClearCodBarrasGuia() {
	m.cod_barras_guia = nil
	m.clearedFields[gnreemission.FieldCodBarrasGuia] = struct{}{}
}

// CodBarrasGuiaCleared returns if the "cod_barras_guia" field was cleared in this mutation.
func (m *GnreEmissionMutation) CodBarrasGuiaCleared() bool {
	_, ok := m.clearedFields[gnreemission.FieldCodBarrasGuia]
	return ok
}

// ResetCodBarrasGuia resets all changes to the "cod_barras_guia" field.
func (m *GnreEmissionMutation) ResetCodBarrasGuia() {
	m.cod_barras_guia = nil
	delete(m.clearedFields, gnreemission.FieldCodBarrasGuia)
}

// SetNumNota sets the "num_nota" field.
func (m *GnreEmissionMutation) SetNumNota(s string) {
	m.num_nota = &s
}

// NumNota returns the value of the "num_nota" field in the mutation.
func (m *GnreEmissionMutation) NumNota() (r string, exists bool) {
	v := m.num_nota
	if v == nil {
		return
	}
	return *v, true
}

// OldNumNota returns the old "num_nota" field's value of the GnreEmission entity.
// If the GnreEmission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GnreEmissionMutation) OldNumNota(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumNota is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumNota requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumNota: %w", err)
	}
	return oldValue.NumNota, nil
}

// ResetNumNota resets all changes to the "num_nota" field.
func (m *GnreEmissionMutation) ResetNumNota() {
	m.num_nota = nil
}

// SetDestinatario sets the "destinatario" field.
func (m *GnreEmissionMutation) SetDestinatario(s string) {
	m.destinatario = &s
}

// Destinatario returns the value of the "destinatario" field in the mutation.
func (m *GnreEmissionMutation) Destinatario() (r string, exists bool) {
	v := m.destinatario
	if v == nil {
		return
	}
	return *v, true
}

// OldDestinatario returns the old "destinatario" field's value of the GnreEmission entity.
// If the GnreEmission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GnreEmissionMutation) OldDestinatario(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDestinatario is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDestinatario requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDestinatario: %w", err)
	}
	return oldValue.Destinatario, nil
}

// ResetDestinatario resets all changes to the "destinatario" field.
func (m *GnreEmissionMutation) ResetDestinatario() {
	m.destinatario = nil
}

// SetCpfCnpj sets the "cpf_cnpj" field.
func (m *GnreEmissionMutation) SetCpfCnpj(s string) {
	m.cpf_cnpj = &s
}

// CpfCnpj returns the value of the "cpf_cnpj" field in the mutation.
func (m *GnreEmissionMutation) CpfCnpj() (r string, exists bool) {
	v := m.cpf_cnpj
	if v == nil {
		return
	}
	return *v, true
}

// OldCpfCnpj returns the old "cpf_cnpj" field's value of the GnreEmission entity.
// If the GnreEmission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GnreEmissionMutation) OldCpfCnpj(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCpfCnpj is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCpfCnpj requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCpfCnpj: %w", err)
	}
	return oldValue.CpfCnpj, nil
}

// ResetCpfCnpj resets all changes to the "cpf_cnpj" field.
func (m *GnreEmissionMutation) ResetCpfCnpj() {
	m.cpf_cnpj = nil
}

// SetEmissionID sets the "emission" edge to the Emission entity by id.
func (m *GnreEmissionMutation) SetEmissionID(id uuid.UUID) {
	m.emission = &id
}

// ClearEmission clears the "emission" edge to the Emission entity.
func (m *GnreEmissionMutation) ClearEmission() {
	m.clearedemission = true
}

// EmissionCleared reports if the "emission" edge to the Emission entity was cleared.
func (m *GnreEmissionMutation) EmissionCleared() bool {
	return m.clearedemission
}

// EmissionID returns the "emission" edge ID in the mutation.
func (m *GnreEmissionMutation) EmissionID() (id uuid.UUID, exists bool) {
	if m.emission != nil {
		return *m.emission, true
	}
	return
}

// EmissionIDs returns the "emission" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EmissionID instead. It exists only for internal usage by the builders.
func (m *GnreEmissionMutation) EmissionIDs() (ids []uuid.UUID) {
	if id := m.emission; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmission resets all changes to the "emission" edge.
func (m *GnreEmissionMutation) ResetEmission() {
	m.emission = nil
	m.clearedemission = false
}

// Where appends a list predicates to the GnreEmissionMutation builder.
func (m *GnreEmissionMutation) Where(ps ...predicate.GnreEmission) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GnreEmissionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GnreEmissionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GnreEmission, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GnreEmissionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GnreEmissionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GnreEmission).
func (m *GnreEmissionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GnreEmissionMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.xml != nil {
		fields = append(fields, gnreemission.FieldXML)
	}
	if m.pdf != nil {
		fields = append(fields, gnreemission.FieldPdf)
	}
	if m.comprovante_pdf != nil {
		fields = append(fields, gnreemission.FieldComprovantePdf)
	}
	if m.guia_amount != nil {
		fields = append(fields, gnreemission.FieldGuiaAmount)
	}
	if m.numero_recibo != nil {
		fields = append(fields, gnreemission.FieldNumeroRecibo)
	}
	if m.chave_nota != nil {
		fields = append(fields, gnreemission.FieldChaveNota)
	}
	if m.cod_barras_guia != nil {
		fields = append(fields, gnreemission.FieldCodBarrasGuia)
	}
	if m.num_nota != nil {
		fields = append(fields, gnreemission.FieldNumNota)
	}
	if m.destinatario != nil {
		fields = append(fields, gnreemission.FieldDestinatario)
	}
	if m.cpf_cnpj != nil {
		fields = append(fields, gnreemission.FieldCpfCnpj)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GnreEmissionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gnreemission.FieldXML:
		return m.XML()
	case gnreemission.FieldPdf:
		return m.Pdf()
	case gnreemission.FieldComprovantePdf:
		return m.ComprovantePdf()
	case gnreemission.FieldGuiaAmount:
		return m.GuiaAmount()
	case gnreemission.FieldNumeroRecibo:
		return m.NumeroRecibo()
	case gnreemission.FieldChaveNota:
		return m.ChaveNota()
	case gnreemission.FieldCodBarrasGuia:
		return m.CodBarrasGuia()
	case gnreemission.FieldNumNota:
		return m.NumNota()
	case gnreemission.FieldDestinatario:
		return m.Destinatario()
	case gnreemission.FieldCpfCnpj:
		return m.CpfCnpj()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GnreEmissionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gnreemission.FieldXML:
		return m.OldXML(ctx)
	case gnreemission.FieldPdf:
		return m.OldPdf(ctx)
	case gnreemission.FieldComprovantePdf:
		return m.OldComprovantePdf(ctx)
	case gnreemission.FieldGuiaAmount:
		return m.OldGuiaAmount(ctx)
	case gnreemission.FieldNumeroRecibo:
		return m.OldNumeroRecibo(ctx)
	case gnreemission.FieldChaveNota:
		return m.OldChaveNota(ctx)
	case gnreemission.FieldCodBarrasGuia:
		return m.OldCodBarrasGuia(ctx)
	case gnreemission.FieldNumNota:
		return m.OldNumNota(ctx)
	case gnreemission.FieldDestinatario:
		return m.OldDestinatario(ctx)
	case gnreemission.FieldCpfCnpj:
		return m.OldCpfCnpj(ctx)
	}
	return nil, fmt.Errorf("unknown GnreEmission field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GnreEmissionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gnreemission.FieldXML:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetXML(v)
		return nil
	case gnreemission.FieldPdf:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPdf(v)
		return nil
	case gnreemission.FieldComprovantePdf:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComprovantePdf(v)
		return nil
	case gnreemission.FieldGuiaAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGuiaAmount(v)
		return nil
	case gnreemission.FieldNumeroRecibo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumeroRecibo(v)
		return nil
	case gnreemission.FieldChaveNota:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChaveNota(v)
		return nil
	case gnreemission.FieldCodBarrasGuia:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCodBarrasGuia(v)
		return nil
	case gnreemission.FieldNumNota:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumNota(v)
		return nil
	case gnreemission.FieldDestinatario:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDestinatario(v)
		return nil
	case gnreemission.FieldCpfCnpj:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCpfCnpj(v)
		return nil
	}
	return fmt.Errorf("unknown GnreEmission field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GnreEmissionMutation) AddedFields() []string {
	var fields []string
	if m.addguia_amount != nil {
		fields = append(fields, gnreemission.FieldGuiaAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GnreEmissionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case gnreemission.FieldGuiaAmount:
		return m.AddedGuiaAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GnreEmissionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case gnreemission.FieldGuiaAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGuiaAmount(v)
		return nil
	}
	return fmt.Errorf("unknown GnreEmission numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GnreEmissionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(gnreemission.FieldPdf) {
		fields = append(fields, gnreemission.FieldPdf)
	}
	if m.FieldCleared(gnreemission.FieldComprovantePdf) {
		fields = append(fields, gnreemission.FieldComprovantePdf)
	}
	if m.FieldCleared(gnreemission.FieldNumeroRecibo) {
		fields = append(fields, gnreemission.FieldNumeroRecibo)
	}
	if m.FieldCleared(gnreemission.FieldCodBarrasGuia) {
		fields = append(fields, gnreemission.FieldCodBarrasGuia)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GnreEmissionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GnreEmissionMutation) ClearField(name string) error {
	switch name {
	case gnreemission.FieldPdf:
		m.ClearPdf()
		return nil
	case gnreemission.FieldComprovantePdf:
		m.ClearComprovantePdf()
		return nil
	case gnreemission.FieldNumeroRecibo:
		m.ClearNumeroRecibo()
		return nil
	case gnreemission.FieldCodBarrasGuia:
		m.ClearCodBarrasGuia()
		return nil
	}
	return fmt.Errorf("unknown GnreEmission nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GnreEmissionMutation) ResetField(name string) error {
	switch name {
	case gnreemission.FieldXML:
		m.ResetXML()
		return nil
	case gnreemission.FieldPdf:
		m.ResetPdf()
		return nil
	case gnreemission.FieldComprovantePdf:
		m.ResetComprovantePdf()
		return nil
	case gnreemission.FieldGuiaAmount:
		m.ResetGuiaAmount()
		return nil
	case gnreemission.FieldNumeroRecibo:
		m.ResetNumeroRecibo()
		return nil
	case gnreemission.FieldChaveNota:
		m.ResetChaveNota()
		return nil
	case gnreemission.FieldCodBarrasGuia:
		m.ResetCodBarrasGuia()
		return nil
	case gnreemission.FieldNumNota:
		m.ResetNumNota()
		return nil
	case gnreemission.FieldDestinatario:
		m.ResetDestinatario()
		return nil
	case gnreemission.FieldCpfCnpj:
		m.ResetCpfCnpj()
		return nil
	}
	return fmt.Errorf("unknown GnreEmission field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GnreEmissionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.emission != nil {
		edges = append(edges, gnreemission.EdgeEmission)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GnreEmissionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case gnreemission.EdgeEmission:
		if id := m.emission; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GnreEmissionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GnreEmissionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GnreEmissionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedemission {
		edges = append(edges, gnreemission.EdgeEmission)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GnreEmissionMutation) EdgeCleared(name string) bool {
	switch name {
	case gnreemission.EdgeEmission:
		return m.clearedemission
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GnreEmissionMutation) ClearEdge(name string) error {
	switch name {
	case gnreemission.EdgeEmission:
		m.ClearEmission()
		return nil
	}
	return fmt.Errorf("unknown GnreEmission unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GnreEmissionMutation) ResetEdge(name string) error {
	switch name {
	case gnreemission.EdgeEmission:
		m.ResetEmission()
		return nil
	}
	return fmt.Errorf("unknown GnreEmission edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	username       *string
	password       *string
	api_key        *string
	role           *user.Role
	created_at     *time.Time
	updated_at     *time.Time
	deleted_at     *time.Time
	clearedFields  map[string]struct{}
	clients        *uuid.UUID
	clearedclients bool
	done           bool
	oldValue       func(context.Context) (*User, error)
	predicates     []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetAPIKey sets the "api_key" field.
func (m *UserMutation) SetAPIKey(s string) {
	m.api_key = &s
}

// APIKey returns the value of the "api_key" field in the mutation.
func (m *UserMutation) APIKey() (r string, exists bool) {
	v := m.api_key
	if v == nil {
		return
	}
	return *v, true
}

// OldAPIKey returns the old "api_key" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAPIKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAPIKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAPIKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAPIKey: %w", err)
	}
	return oldValue.APIKey, nil
}

// ResetAPIKey resets all changes to the "api_key" field.
func (m *UserMutation) ResetAPIKey() {
	m.api_key = nil
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(u user.Role) {
	m.role = &u
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r user.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v user.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
}

// SetClientID sets the "client_id" field.
func (m *UserMutation) SetClientID(u uuid.UUID) {
	m.clients = &u
}

// ClientID returns the value of the "client_id" field in the mutation.
func (m *UserMutation) ClientID() (r uuid.UUID, exists bool) {
	v := m.clients
	if v == nil {
		return
	}
	return *v, true
}

// OldClientID returns the old "client_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldClientID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientID: %w", err)
	}
	return oldValue.ClientID, nil
}

// ResetClientID resets all changes to the "client_id" field.
func (m *UserMutation) ResetClientID() {
	m.clients = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UserMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UserMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *UserMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[user.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *UserMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UserMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, user.FieldDeletedAt)
}

// SetClientsID sets the "clients" edge to the Clients entity by id.
func (m *UserMutation) SetClientsID(id uuid.UUID) {
	m.clients = &id
}

// ClearClients clears the "clients" edge to the Clients entity.
func (m *UserMutation) ClearClients() {
	m.clearedclients = true
	m.clearedFields[user.FieldClientID] = struct{}{}
}

// ClientsCleared reports if the "clients" edge to the Clients entity was cleared.
func (m *UserMutation) ClientsCleared() bool {
	return m.clearedclients
}

// ClientsID returns the "clients" edge ID in the mutation.
func (m *UserMutation) ClientsID() (id uuid.UUID, exists bool) {
	if m.clients != nil {
		return *m.clients, true
	}
	return
}

// ClientsIDs returns the "clients" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ClientsID instead. It exists only for internal usage by the builders.
func (m *UserMutation) ClientsIDs() (ids []uuid.UUID) {
	if id := m.clients; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetClients resets all changes to the "clients" edge.
func (m *UserMutation) ResetClients() {
	m.clients = nil
	m.clearedclients = false
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.api_key != nil {
		fields = append(fields, user.FieldAPIKey)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	if m.clients != nil {
		fields = append(fields, user.FieldClientID)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, user.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	case user.FieldAPIKey:
		return m.APIKey()
	case user.FieldRole:
		return m.Role()
	case user.FieldClientID:
		return m.ClientID()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldAPIKey:
		return m.OldAPIKey(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	case user.FieldClientID:
		return m.OldClientID(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldAPIKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAPIKey(v)
		return nil
	case user.FieldRole:
		v, ok := value.(user.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case user.FieldClientID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientID(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldDeletedAt) {
		fields = append(fields, user.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldAPIKey:
		m.ResetAPIKey()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	case user.FieldClientID:
		m.ResetClientID()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clients != nil {
		edges = append(edges, user.EdgeClients)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeClients:
		if id := m.clients; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedclients {
		edges = append(edges, user.EdgeClients)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeClients:
		return m.clearedclients
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeClients:
		m.ClearClients()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeClients:
		m.ResetClients()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
